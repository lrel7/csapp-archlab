                            | #######################################################################
                            | # Test for copying block of size 4;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f4b002000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f20400000000000000 | 	irmovq $4, %rdx		# src and dst have 4 elements
0x014: 30f60802000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f7d001000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | # Loop header
0x032: 6300                 | xorq %rax,%rax		    # count = 0;
                            | 
0x034:                      | Main_Loop:
0x034: c0f2faffffffffffffff | iaddq $-6, %rdx         # len < 6?
0x03e: 725a01000000000000   | jl Remain               # if so, goto Remain:
                            | 
0x047:                      | Loop1:	
0x047: 50a70000000000000000 | mrmovq (%rdi), %r10	    # read val from src...
0x051: 40a60000000000000000 | rmmovq %r10, (%rsi)	    # ...and store it to dst
0x05b: 62aa                 | andq %r10, %r10		    # val <= 0?
0x05d: 717000000000000000   | jle Loop2		        # if so, goto next loop
0x066: c0f00100000000000000 | iaddq $1, %rax          # count++
                            | 
0x070:                      | Loop2:	
0x070: 50a70800000000000000 | mrmovq 8(%rdi), %r10	# read val from src...
0x07a: 40a60800000000000000 | rmmovq %r10, 8(%rsi)	# ...and store it to dst
0x084: 62aa                 | andq %r10, %r10		    # val <= 0?
0x086: 719900000000000000   | jle Loop3		        # if so, goto next loop
0x08f: c0f00100000000000000 | iaddq $1, %rax          # count++
                            | 
0x099:                      | Loop3:	
0x099: 50a71000000000000000 | mrmovq 16(%rdi), %r10	# read val from src...
0x0a3: 40a61000000000000000 | rmmovq %r10, 16(%rsi)	# ...and store it to dst
0x0ad: 62aa                 | andq %r10, %r10		    # val <= 0?
0x0af: 71c200000000000000   | jle Loop4		        # if so, goto next loop
0x0b8: c0f00100000000000000 | iaddq $1, %rax          # count++
                            | 
0x0c2:                      | Loop4:	
0x0c2: 50a71800000000000000 | mrmovq 24(%rdi), %r10	# read val from src...
0x0cc: 40a61800000000000000 | rmmovq %r10, 24(%rsi)	# ...and store it to dst
0x0d6: 62aa                 | andq %r10, %r10		    # val <= 0?
0x0d8: 71eb00000000000000   | jle Loop5		        # if so, goto next loop
0x0e1: c0f00100000000000000 | iaddq $1, %rax          # count++
                            | 
0x0eb:                      | Loop5:	
0x0eb: 50a72000000000000000 | mrmovq 32(%rdi), %r10	# read val from src...
0x0f5: 40a62000000000000000 | rmmovq %r10, 32(%rsi)	# ...and store it to dst
0x0ff: 62aa                 | andq %r10, %r10		    # val <= 0?
0x101: 711401000000000000   | jle Loop6		        # if so, goto next loop
0x10a: c0f00100000000000000 | iaddq $1, %rax          # count++
                            | 
0x114:                      | Loop6:	
0x114: 50a72800000000000000 | mrmovq 40(%rdi), %r10	# read val from src...
0x11e: 40a62800000000000000 | rmmovq %r10, 40(%rsi)	# ...and store it to dst
0x128: c0f73000000000000000 | iaddq $48, %rdi         # increment src
0x132: c0f63000000000000000 | iaddq $48, %rsi         # increment dst
0x13c: 62aa                 | andq %r10, %r10		    # val <= 0?
0x13e: 713400000000000000   | jle Main_Loop		    # if so, goto next loop
0x147: c0f00100000000000000 | iaddq $1, %rax          # count++
0x151: 703400000000000000   | jmp Main_Loop
                            | 
0x15a:                      | Remain:
0x15a: c0f20600000000000000 | iaddq $6, %rdx          # add back %rdx
0x164: 71c801000000000000   | jle Done                # if len <= 0, goto Done
                            | 
0x16d:                      | Remain_Loop:
0x16d: 50a70000000000000000 | mrmovq (%rdi), %r10	    # read val from src...
0x177: 40a60000000000000000 | rmmovq %r10, (%rsi)	    # ...and store it to dst
0x181: 62aa                 | andq %r10, %r10		    # val <= 0?
0x183: 719601000000000000   | jle Test		        # if so, skip counter increment
0x18c: c0f00100000000000000 | iaddq $1, %rax          # count++
                            | 
0x196:                      | Test:
0x196: c0f2ffffffffffffffff | iaddq $-1, %rdx         # decrement %rdx
0x1a0: 6222                 | andq %rdx,%rdx		    # len <= 0?
0x1a2: 71c801000000000000   | jle Done		        # if so, goto Done:
0x1ab: c0f70800000000000000 | iaddq $8, %rdi          # increment src
0x1b5: c0f60800000000000000 | iaddq $8, %rsi          # increment dst
0x1bf: 706d01000000000000   | jmp Remain_Loop
                            | 
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x1c8:                      | Done:
0x1c8: 90                   | ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x1c9:                      | End:
                            | #/* $end ncopy-ys */
0x1c9:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x1d0:                      | 	.align 8
0x1d0:                      | src:
0x1d0: 0100000000000000     | 	.quad 1
0x1d8: 0200000000000000     | 	.quad 2
0x1e0: fdffffffffffffff     | 	.quad -3
0x1e8: fcffffffffffffff     | 	.quad -4
0x1f0: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x200:                      | 	.align 16
0x200:                      | Predest:
0x200: fadebc0000000000     | 	.quad 0xbcdefa
0x208:                      | dest:
0x208: abefcd0000000000     | 	.quad 0xcdefab
0x210: abefcd0000000000     | 	.quad 0xcdefab
0x218: abefcd0000000000     | 	.quad 0xcdefab
0x220: abefcd0000000000     | 	.quad 0xcdefab
0x228:                      | Postdest:
0x228: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x230:                      | .align 8
                            | # Run time stack
0x230: 0000000000000000     | 	.quad 0
0x238: 0000000000000000     | 	.quad 0
0x240: 0000000000000000     | 	.quad 0
0x248: 0000000000000000     | 	.quad 0
0x250: 0000000000000000     | 	.quad 0
0x258: 0000000000000000     | 	.quad 0
0x260: 0000000000000000     | 	.quad 0
0x268: 0000000000000000     | 	.quad 0
0x270: 0000000000000000     | 	.quad 0
0x278: 0000000000000000     | 	.quad 0
0x280: 0000000000000000     | 	.quad 0
0x288: 0000000000000000     | 	.quad 0
0x290: 0000000000000000     | 	.quad 0
0x298: 0000000000000000     | 	.quad 0
0x2a0: 0000000000000000     | 	.quad 0
0x2a8: 0000000000000000     | 	.quad 0
                            | 
0x2b0:                      | Stack:
