                            | #######################################################################
                            | # Test for copying block of size 4;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f4e002000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f20400000000000000 | 	irmovq $4, %rdx		# src and dst have 4 elements
0x014: 30f63802000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f70802000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | # Loop header
0x032: 6300                 | xorq %rax,%rax		    # count = 0;
0x034: 70f500000000000000   | jmp Test_Unrolling
                            | 
0x03d:                      | Loop1:	
0x03d: 50a70000000000000000 | mrmovq (%rdi), %r10	    # read val from src...
0x047: 40a60000000000000000 | rmmovq %r10, (%rsi)	    # ...and store it to dst
0x051: 62aa                 | andq %r10, %r10		    # val <= 0?
0x053: 716600000000000000   | jle Loop2		        # if so, goto next loop
0x05c: c0f00100000000000000 | iaddq $1, %rax          # count++
                            | 
0x066:                      | Loop2:	
0x066: 50a70800000000000000 | mrmovq 8(%rdi), %r10	# read val from src...
0x070: 40a60800000000000000 | rmmovq %r10, 8(%rsi)	# ...and store it to dst
0x07a: 62aa                 | andq %r10, %r10		    # val <= 0?
0x07c: 718f00000000000000   | jle Loop3		        # if so, goto next loop
0x085: c0f00100000000000000 | iaddq $1, %rax          # count++
                            | 
0x08f:                      | Loop3:	
0x08f: 50a71000000000000000 | mrmovq 16(%rdi), %r10	# read val from src...
0x099: 40a61000000000000000 | rmmovq %r10, 16(%rsi)	# ...and store it to dst
0x0a3: 62aa                 | andq %r10, %r10		    # val <= 0?
0x0a5: 71b800000000000000   | jle Loop4		        # if so, goto next loop
0x0ae: c0f00100000000000000 | iaddq $1, %rax          # count++
                            | 
0x0b8:                      | Loop4:	
0x0b8: 50a71800000000000000 | mrmovq 24(%rdi), %r10	# read val from src...
0x0c2: 40a61800000000000000 | rmmovq %r10, 24(%rsi)	# ...and store it to dst
0x0cc: c0f72000000000000000 | iaddq $32, %rdi
0x0d6: c0f62000000000000000 | iaddq $32, %rsi
0x0e0: 62aa                 | andq %r10, %r10		    # val <= 0?
0x0e2: 71f500000000000000   | jle Test_Unrolling		# if so, goto next Test_Unrolling
0x0eb: c0f00100000000000000 | iaddq $1, %rax          # count++
                            | 
0x0f5:                      | Test_Unrolling:
0x0f5: c0f2fcffffffffffffff | iaddq $-4, %rdx         # len >= 4?
0x0ff: 753d00000000000000   | jge Loop1
                            | 
                            | # Deal with remain data
0x108: c0f20400000000000000 | iaddq $4, %rdx          # add back %rdx
0x112: 710302000000000000   | jle Done                # if len <= 0, goto Done
                            | 
0x11b:                      | Remain:
0x11b: c0f2feffffffffffffff | iaddq $-2, %rdx         # len < 2 (len == 1)?
0x125: 719f01000000000000   | jle One
                            | 
0x12e:                      | Unroll1:
0x12e: 50a70000000000000000 | mrmovq (%rdi), %r10	    # read val from src...
0x138: 40a60000000000000000 | rmmovq %r10, (%rsi)	    # ...and store it to dst
0x142: 62aa                 | andq %r10, %r10		    # val <= 0?
0x144: 715701000000000000   | jle Unroll2		        # if so, skip counter increment
0x14d: c0f00100000000000000 | iaddq $1, %rax          # count++
                            | 
0x157:                      | Unroll2:
0x157: 50a70800000000000000 | mrmovq 8(%rdi), %r10
0x161: 40a60800000000000000 | rmmovq %r10, 8(%rsi)
0x16b: c0f71000000000000000 | iaddq $16, %rdi
0x175: c0f61000000000000000 | iaddq $16, %rsi
0x17f: 62aa                 | andq %r10, %r10		    # val <= 0?
0x181: 719401000000000000   | jle Test1		        # if so, skip counter increment
0x18a: c0f00100000000000000 | iaddq $1, %rax          # count++
                            | 
0x194:                      | Test1:
0x194: 6222                 | andq %rdx, %rdx         # len <= 0?
0x196: 710302000000000000   | jle Done
                            | 
0x19f:                      | One:
0x19f: 50a70000000000000000 | mrmovq (%rdi), %r10	    # read val from src...
0x1a9: 40a60000000000000000 | rmmovq %r10, (%rsi)	    # ...and store it to dst
0x1b3: 62aa                 | andq %r10, %r10		    # val <= 0?
0x1b5: 710302000000000000   | jle Done		        # if so, skip counter increment
0x1be: c0f00100000000000000 | iaddq $1, %rax          # count++
0x1c8: 700302000000000000   | jmp Done
                            | 
0x1d1:                      | Test:
0x1d1: c0f2ffffffffffffffff | iaddq $-1, %rdx         # decrement %rdx
0x1db: 6222                 | andq %rdx,%rdx		    # len <= 0?
0x1dd: 710302000000000000   | jle Done		        # if so, goto Done:
0x1e6: c0f70800000000000000 | iaddq $8, %rdi          # increment src
0x1f0: c0f60800000000000000 | iaddq $8, %rsi          # increment dst
0x1fa: 701b01000000000000   | jmp Remain
                            | 
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x203:                      | Done:
0x203: 90                   | ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x204:                      | End:
                            | #/* $end ncopy-ys */
0x204:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x208:                      | 	.align 8
0x208:                      | src:
0x208: ffffffffffffffff     | 	.quad -1
0x210: feffffffffffffff     | 	.quad -2
0x218: 0300000000000000     | 	.quad 3
0x220: 0400000000000000     | 	.quad 4
0x228: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x230:                      | 	.align 16
0x230:                      | Predest:
0x230: fadebc0000000000     | 	.quad 0xbcdefa
0x238:                      | dest:
0x238: abefcd0000000000     | 	.quad 0xcdefab
0x240: abefcd0000000000     | 	.quad 0xcdefab
0x248: abefcd0000000000     | 	.quad 0xcdefab
0x250: abefcd0000000000     | 	.quad 0xcdefab
0x258:                      | Postdest:
0x258: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x260:                      | .align 8
                            | # Run time stack
0x260: 0000000000000000     | 	.quad 0
0x268: 0000000000000000     | 	.quad 0
0x270: 0000000000000000     | 	.quad 0
0x278: 0000000000000000     | 	.quad 0
0x280: 0000000000000000     | 	.quad 0
0x288: 0000000000000000     | 	.quad 0
0x290: 0000000000000000     | 	.quad 0
0x298: 0000000000000000     | 	.quad 0
0x2a0: 0000000000000000     | 	.quad 0
0x2a8: 0000000000000000     | 	.quad 0
0x2b0: 0000000000000000     | 	.quad 0
0x2b8: 0000000000000000     | 	.quad 0
0x2c0: 0000000000000000     | 	.quad 0
0x2c8: 0000000000000000     | 	.quad 0
0x2d0: 0000000000000000     | 	.quad 0
0x2d8: 0000000000000000     | 	.quad 0
                            | 
0x2e0:                      | Stack:
