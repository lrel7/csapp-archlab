                            | #######################################################################
                            | # Test for copying block of size 4;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f45004000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f20400000000000000 | 	irmovq $4, %rdx		# src and dst have 4 elements
0x014: 30f6a803000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f77003000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Author: Sum-Yuet Lee
                            | # Date: 2024/5/22
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
0x032: 6300                 | xorq %rax, %rax		        # count = 0;
0x034: c0f2f8ffffffffffffff | iaddq $-8, %rdx             # %rdx < 8?
0x03e: 72b601000000000000   | jl Remain                   # if so, goto Remain
                            | 
0x047:                      | Unroll:
0x047:                      | Unroll_1:
0x047: 50870000000000000000 | mrmovq (%rdi), %r8      # read
0x051: 40860000000000000000 | rmmovq %r8, (%rsi)      # write
0x05b: 6288                 | andq %r8, %r8		    # val <= 0?
0x05d: 717000000000000000   | jle Unroll_2		    # if so, goto next
0x066: c0f00100000000000000 | iaddq $1, %rax          # count++
                            | 
0x070:                      | Unroll_2:
0x070: 50970800000000000000 | mrmovq 8(%rdi), %r9     # read
0x07a: 40960800000000000000 | rmmovq %r9, 8(%rsi)     # write
0x084: 6299                 | andq %r9, %r9		    # val <= 0?
0x086: 719900000000000000   | jle Unroll_3		    # if so, goto next
0x08f: c0f00100000000000000 | iaddq $1, %rax          # count++
                            | 
0x099:                      | Unroll_3:
0x099: 50a71000000000000000 | mrmovq 16(%rdi), %r10   # read
0x0a3: 40a61000000000000000 | rmmovq %r10, 16(%rsi)   # write
0x0ad: 62aa                 | andq %r10, %r10		    # val <= 0?
0x0af: 71c200000000000000   | jle Unroll_4		    # if so, goto next
0x0b8: c0f00100000000000000 | iaddq $1, %rax          # count++
                            | 
0x0c2:                      | Unroll_4:
0x0c2: 50b71800000000000000 | mrmovq 24(%rdi), %r11   # read
0x0cc: 40b61800000000000000 | rmmovq %r11, 24(%rsi)   # write
0x0d6: 62bb                 | andq %r11, %r11		    # val <= 0?
0x0d8: 71eb00000000000000   | jle Unroll_5            # if so, goto next
0x0e1: c0f00100000000000000 | iaddq $1, %rax          # count++
                            | 
0x0eb:                      | Unroll_5:
0x0eb: 50c72000000000000000 | mrmovq 32(%rdi), %r12   # read
0x0f5: 40c62000000000000000 | rmmovq %r12, 32(%rsi)   # write
0x0ff: 62cc                 | andq %r12, %r12 	    # val <= 0?
0x101: 711401000000000000   | jle Unroll_6	        # if so, goto next
0x10a: c0f00100000000000000 | iaddq $1, %rax          # count++
                            | 
0x114:                      | Unroll_6:
0x114: 50d72800000000000000 | mrmovq 40(%rdi), %r13   # read
0x11e: 40d62800000000000000 | rmmovq %r13, 40(%rsi)   # write
0x128: 62dd                 | andq %r13, %r13		    # val <= 0?
0x12a: 713d01000000000000   | jle Unroll_7        	# if so, goto next
0x133: c0f00100000000000000 | iaddq $1, %rax          # count++
                            | 
0x13d:                      | Unroll_7:
0x13d: 50e73000000000000000 | mrmovq 48(%rdi), %r14   # read
0x147: 40e63000000000000000 | rmmovq %r14, 48(%rsi)   # write
0x151: 62ee                 | andq %r14, %r14		    # val <= 0?
0x153: 716601000000000000   | jle Unroll_8            # if so, goto next
0x15c: c0f00100000000000000 | iaddq $1, %rax          # count++
                            | 
0x166:                      | Unroll_8:
0x166: 50373800000000000000 | mrmovq 56(%rdi), %rbx   # read
0x170: 40363800000000000000 | rmmovq %rbx, 56(%rsi)   # write
0x17a: 6233                 | andq %rbx, %rbx		    # val <= 0?
0x17c: 718f01000000000000   | jle Update		        # if so, goto Update
0x185: c0f00100000000000000 | iaddq $1, %rax          # count++
                            | 
0x18f:                      | Update:
                            | # Increment src and dst
0x18f: c0f74000000000000000 | iaddq $64, %rdi
0x199: c0f64000000000000000 | iaddq $64, %rsi
0x1a3: c0f2f8ffffffffffffff | iaddq $-8, %rdx         # len >= 8? (now %rdx = len - 8)
0x1ad: 754700000000000000   | jge Unroll              # if so, keep unrolling
                            | 
                            | # Deal with remain data
                            | # %rdx may be -8 ~ -1
                            | # BST judge
0x1b6:                      | Remain:
0x1b6: c0f20400000000000000 | iaddq $4, %rdx          # %rdx == -4? 
0x1c0: 72db01000000000000   | jl Node_6               # if %rdx < -4, goto Node_6
0x1c9: 762e02000000000000   | jg Node_2               # if %rdx > -4, goto Node_2
0x1d2: 70c502000000000000   | jmp Remain_4            # goto Remain_4
                            | 
0x1db:                      | Node_6:
0x1db: c0f20200000000000000 | iaddq $2, %rdx          # %rdx == -6?
0x1e5: 720002000000000000   | jl Node_7               # if %rdx < -6 (== -7), goto Node_7
0x1ee: 761c02000000000000   | jg Node_5               # if %rdx > -6 (== -5), goto Node_5
0x1f7: 701703000000000000   | jmp Remain_2
                            | 
0x200:                      | Node_7:
0x200: c0f20100000000000000 | iaddq $1, %rdx          # %rdx == -7?
0x20a: 726903000000000000   | jl Done                 # if %rdx < -7 (== -8), goto Done
0x213: 704003000000000000   | jmp Remain_1
                            | 
0x21c:                      | Node_5:
0x21c: 70ee02000000000000   | jmp Remain_3
                            | 
0x225:                      | Node_3:
0x225: 709c02000000000000   | jmp Remain_5
                            | 
0x22e:                      | Node_2:
0x22e: c0f2feffffffffffffff | iaddq $-2, %rdx         # %rdx == -2?
0x238: 722502000000000000   | jl Node_3               # if %rdx < -2 (== -3), goto Node_3
0x241: 737302000000000000   | je Remain_6             # if %rdx == -2, goto Remain_6
                            |                         # else, %rdx == -1, goto Remain_7
                            | 
0x24a:                      | Remain_7:
0x24a: 50e73000000000000000 | mrmovq 48(%rdi), %r14   # read
0x254: 40e63000000000000000 | rmmovq %r14, 48(%rsi)   # write
0x25e: 62ee                 | andq %r14, %r14
0x260: 717302000000000000   | jle Remain_6
0x269: c0f00100000000000000 | iaddq $1, %rax
                            | 
0x273:                      | Remain_6:
0x273: 50d72800000000000000 | mrmovq 40(%rdi), %r13   # read
0x27d: 40d62800000000000000 | rmmovq %r13, 40(%rsi)   # write
0x287: 62dd                 | andq %r13, %r13
0x289: 719c02000000000000   | jle Remain_5
0x292: c0f00100000000000000 | iaddq $1, %rax
                            | 
0x29c:                      | Remain_5:
0x29c: 50c72000000000000000 | mrmovq 32(%rdi), %r12   # read
0x2a6: 40c62000000000000000 | rmmovq %r12, 32(%rsi)   # write
0x2b0: 62cc                 | andq %r12, %r12
0x2b2: 71c502000000000000   | jle Remain_4
0x2bb: c0f00100000000000000 | iaddq $1, %rax
                            | 
0x2c5:                      | Remain_4: 
0x2c5: 50b71800000000000000 | mrmovq 24(%rdi), %r11   # read
0x2cf: 40b61800000000000000 | rmmovq %r11, 24(%rsi)   # write
0x2d9: 62bb                 | andq %r11, %r11
0x2db: 71ee02000000000000   | jle Remain_3
0x2e4: c0f00100000000000000 | iaddq $1, %rax
                            | 
0x2ee:                      | Remain_3:  
0x2ee: 50a71000000000000000 | mrmovq 16(%rdi), %r10   # read
0x2f8: 40a61000000000000000 | rmmovq %r10, 16(%rsi)   # write
0x302: 62aa                 | andq %r10, %r10
0x304: 711703000000000000   | jle Remain_2
0x30d: c0f00100000000000000 | iaddq $1, %rax
                            | 
0x317:                      | Remain_2:  
0x317: 50970800000000000000 | mrmovq 8(%rdi), %r9     # read
0x321: 40960800000000000000 | rmmovq %r9, 8(%rsi)     # write
0x32b: 6299                 | andq %r9, %r9
0x32d: 714003000000000000   | jle Remain_1
0x336: c0f00100000000000000 | iaddq $1, %rax
                            | 
0x340:                      | Remain_1:  
0x340: 50870000000000000000 | mrmovq (%rdi), %r8      # read
0x34a: 40860000000000000000 | rmmovq %r8, (%rsi)      # write
0x354: 6288                 | andq %r8, %r8
0x356: 716903000000000000   | jle Done
0x35f: c0f00100000000000000 | iaddq $1, %rax
                            | 
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x369:                      | Done:
0x369: 90                   | ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x36a:                      | End:
                            | #/* $end ncopy-ys */
0x36a:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x370:                      | 	.align 8
0x370:                      | src:
0x370: ffffffffffffffff     | 	.quad -1
0x378: feffffffffffffff     | 	.quad -2
0x380: 0300000000000000     | 	.quad 3
0x388: 0400000000000000     | 	.quad 4
0x390: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x3a0:                      | 	.align 16
0x3a0:                      | Predest:
0x3a0: fadebc0000000000     | 	.quad 0xbcdefa
0x3a8:                      | dest:
0x3a8: abefcd0000000000     | 	.quad 0xcdefab
0x3b0: abefcd0000000000     | 	.quad 0xcdefab
0x3b8: abefcd0000000000     | 	.quad 0xcdefab
0x3c0: abefcd0000000000     | 	.quad 0xcdefab
0x3c8:                      | Postdest:
0x3c8: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x3d0:                      | .align 8
                            | # Run time stack
0x3d0: 0000000000000000     | 	.quad 0
0x3d8: 0000000000000000     | 	.quad 0
0x3e0: 0000000000000000     | 	.quad 0
0x3e8: 0000000000000000     | 	.quad 0
0x3f0: 0000000000000000     | 	.quad 0
0x3f8: 0000000000000000     | 	.quad 0
0x400: 0000000000000000     | 	.quad 0
0x408: 0000000000000000     | 	.quad 0
0x410: 0000000000000000     | 	.quad 0
0x418: 0000000000000000     | 	.quad 0
0x420: 0000000000000000     | 	.quad 0
0x428: 0000000000000000     | 	.quad 0
0x430: 0000000000000000     | 	.quad 0
0x438: 0000000000000000     | 	.quad 0
0x440: 0000000000000000     | 	.quad 0
0x448: 0000000000000000     | 	.quad 0
                            | 
0x450:                      | Stack:
