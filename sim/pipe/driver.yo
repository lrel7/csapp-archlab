                            | #######################################################################
                            | # Test for copying block of size 2;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f4f003000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f20200000000000000 | 	irmovq $2, %rdx		# src and dst have 2 elements
0x014: 30f65803000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f73003000000000000 | 	irmovq src, %rdi	# src array
0x028: 803b00000000000000   | 	call ncopy		 
0x031: 80c901000000000000   | 	call check	        # Call checker code
0x03a: 00                   | 	halt                    # should halt with 0xaaaa in %rax
0x03b:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x03b:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | # Loop header
0x03b: 6300                 | xorq %rax,%rax		    # count = 0;
                            | 
0x03d:                      | Main_Loop:
0x03d: c0f2faffffffffffffff | iaddq $-6, %rdx         # len >= 6?
0x047: 75b500000000000000   | jge Loop1		        # if so, goto Loop1:
                            | 
0x050:                      | Remain_Loop:
0x050: c0f20600000000000000 | iaddq $6, %rdx          # add back %rdx
0x05a: 50a70000000000000000 | mrmovq (%rdi), %r10	    # read val from src...
0x064: 40a60000000000000000 | rmmovq %r10, (%rsi)	    # ...and store it to dst
0x06e: 62aa                 | andq %r10, %r10		    # val <= 0?
0x070: 718300000000000000   | jle Test		        # if so, skip counter increment
0x079: c0f00100000000000000 | iaddq $1, %rax          # count++
                            | 
0x083:                      | Test:
0x083: c0f2ffffffffffffffff | iaddq $-1, %rdx         # decrement %rdx
0x08d: 6222                 | andq %rdx,%rdx		    # len <= 0?
0x08f: 71c801000000000000   | jle Done		        # if so, goto Done:
0x098: c0f70800000000000000 | iaddq $8, %rdi          # increment src
0x0a2: c0f60800000000000000 | iaddq $8, %rsi          # increment dst
0x0ac: 705000000000000000   | jmp Remain_Loop
                            | 
0x0b5:                      | Loop1:	
0x0b5: 50a70000000000000000 | mrmovq (%rdi), %r10	    # read val from src...
0x0bf: 40a60000000000000000 | rmmovq %r10, (%rsi)	    # ...and store it to dst
0x0c9: 62aa                 | andq %r10, %r10		    # val <= 0?
0x0cb: 71de00000000000000   | jle Loop2		        # if so, goto next loop
0x0d4: c0f00100000000000000 | iaddq $1, %rax          # count++
                            | 
0x0de:                      | Loop2:	
0x0de: 50a70800000000000000 | mrmovq 8(%rdi), %r10	# read val from src...
0x0e8: 40a60800000000000000 | rmmovq %r10, 8(%rsi)	# ...and store it to dst
0x0f2: 62aa                 | andq %r10, %r10		    # val <= 0?
0x0f4: 710701000000000000   | jle Loop3		        # if so, goto next loop
0x0fd: c0f00100000000000000 | iaddq $1, %rax          # count++
                            | 
0x107:                      | Loop3:	
0x107: 50a71000000000000000 | mrmovq 16(%rdi), %r10	# read val from src...
0x111: 40a61000000000000000 | rmmovq %r10, 16(%rsi)	# ...and store it to dst
0x11b: 62aa                 | andq %r10, %r10		    # val <= 0?
0x11d: 713001000000000000   | jle Loop4		        # if so, goto next loop
0x126: c0f00100000000000000 | iaddq $1, %rax          # count++
                            | 
0x130:                      | Loop4:	
0x130: 50a71800000000000000 | mrmovq 24(%rdi), %r10	# read val from src...
0x13a: 40a61800000000000000 | rmmovq %r10, 24(%rsi)	# ...and store it to dst
0x144: 62aa                 | andq %r10, %r10		    # val <= 0?
0x146: 715901000000000000   | jle Loop5		        # if so, goto next loop
0x14f: c0f00100000000000000 | iaddq $1, %rax          # count++
                            | 
0x159:                      | Loop5:	
0x159: 50a72000000000000000 | mrmovq 32(%rdi), %r10	# read val from src...
0x163: 40a62000000000000000 | rmmovq %r10, 32(%rsi)	# ...and store it to dst
0x16d: 62aa                 | andq %r10, %r10		    # val <= 0?
0x16f: 718201000000000000   | jle Loop6		        # if so, goto next loop
0x178: c0f00100000000000000 | iaddq $1, %rax          # count++
                            | 
0x182:                      | Loop6:	
0x182: 50a72800000000000000 | mrmovq 40(%rdi), %r10	# read val from src...
0x18c: 40a62800000000000000 | rmmovq %r10, 40(%rsi)	# ...and store it to dst
0x196: c0f73000000000000000 | iaddq $48, %rdi         # increment src
0x1a0: c0f63000000000000000 | iaddq $48, %rsi         # increment dst
0x1aa: 62aa                 | andq %r10, %r10		    # val <= 0?
0x1ac: 713d00000000000000   | jle Main_Loop		    # if so, goto next loop
0x1b5: c0f00100000000000000 | iaddq $1, %rax          # count++
0x1bf: 703d00000000000000   | jmp Main_Loop
                            | 
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x1c8:                      | Done:
0x1c8: 90                   | ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x1c9:                      | End:
                            | #/* $end ncopy-ys */
0x1c9:                      | EndFun:
                            | #################################################################### 
                            | # Epilogue code for the correctness testing driver
                            | ####################################################################
                            | 
                            | # This is the correctness checking code.
                            | # It checks:
                            | #   1. %rax has 1.  Set %rax to 0xbbbb if not.
                            | #   2. The total length of the code is less than or equal to 1000.
                            | #      Set %rax to 0xcccc if not.
                            | #   3. The source data was copied to the destination.
                            | #      Set %rax to 0xdddd if not.
                            | #   4. The words just before and just after the destination region
                            | #      were not corrupted.  Set %rax to 0xeeee if not.
                            | # If all checks pass, then sets %rax to 0xaaaa
0x1c9:                      | check:
                            | 	# Return value test
0x1c9: 30fa0100000000000000 | 	irmovq $1,%r10
0x1d3: 61a0                 | 	subq %r10,%rax
0x1d5: 73f101000000000000   | 	je checkb
0x1de: 30f0bbbb000000000000 | 	irmovq $0xbbbb,%rax  # Failed test #1
0x1e8: 702f03000000000000   | 	jmp cdone
0x1f1:                      | checkb:
                            | 	# Code length check
0x1f1: 30f0c901000000000000 | 	irmovq EndFun,%rax
0x1fb: 30f23b00000000000000 | 	irmovq StartFun,%rdx
0x205: 6120                 | 	subq %rdx,%rax
0x207: 30f2e803000000000000 | 	irmovq $1000,%rdx
0x211: 6102                 | 	subq %rax,%rdx
0x213: 752f02000000000000   | 	jge checkm
0x21c: 30f0cccc000000000000 | 	irmovq $0xcccc,%rax  # Failed test #2
0x226: 702f03000000000000   | 	jmp cdone
0x22f:                      | checkm:
0x22f: 30f25803000000000000 | 	irmovq dest, %rdx # Pointer to next destination location
0x239: 30f33003000000000000 | 	irmovq src,%rbx   # Pointer to next source location
0x243: 30f70200000000000000 | 	irmovq $2,%rdi  # Count
0x24d: 6277                 | 	andq %rdi,%rdi
0x24f: 73ad02000000000000   | 	je checkpre         # Skip check if count = 0
0x258:                      | mcloop:
0x258: 50020000000000000000 | 	mrmovq (%rdx),%rax
0x262: 50630000000000000000 | 	mrmovq (%rbx),%rsi
0x26c: 6160                 | 	subq %rsi,%rax
0x26e: 738a02000000000000   | 	je  mok
0x277: 30f0dddd000000000000 | 	irmovq $0xdddd,%rax # Failed test #3
0x281: 702f03000000000000   | 	jmp cdone
0x28a:                      | mok:
0x28a: 30f00800000000000000 | 	irmovq $8,%rax
0x294: 6002                 | 	addq %rax,%rdx	  # dest ++
0x296: 6003                 | 	addq %rax,%rbx    # src++
0x298: 30f00100000000000000 | 	irmovq $1,%rax
0x2a2: 6107                 | 	subq %rax,%rdi    # cnt--
0x2a4: 765802000000000000   | 	jg mcloop
0x2ad:                      | checkpre:
                            | 	# Check for corruption
0x2ad: 30f25003000000000000 | 	irmovq Predest,%rdx
0x2b7: 50020000000000000000 | 	mrmovq (%rdx), %rax  # Get word before destination
0x2c1: 30f2fadebc0000000000 | 	irmovq $0xbcdefa, %rdx
0x2cb: 6120                 | 	subq %rdx,%rax
0x2cd: 73e902000000000000   | 	je checkpost
0x2d6: 30f0eeee000000000000 | 	irmovq $0xeeee,%rax  # Failed test #4
0x2e0: 702f03000000000000   | 	jmp cdone
0x2e9:                      | checkpost:
                            | 	# Check for corruption
0x2e9: 30f26803000000000000 | 	irmovq Postdest,%rdx
0x2f3: 50020000000000000000 | 	mrmovq (%rdx), %rax  # Get word after destination
0x2fd: 30f2bcfade0000000000 | 	irmovq $0xdefabc, %rdx
0x307: 6120                 | 	subq %rdx,%rax
0x309: 732503000000000000   | 	je checkok
0x312: 30f0eeee000000000000 | 	irmovq $0xeeee,%rax # Failed test #4
0x31c: 702f03000000000000   | 	jmp cdone
0x325:                      | checkok:
                            | 	# Successful checks
0x325: 30f0aaaa000000000000 | 	irmovq $0xaaaa,%rax
0x32f:                      | cdone:
0x32f: 90                   | 	ret
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x330:                      | 	.align 8
0x330:                      | src:
0x330: ffffffffffffffff     | 	.quad -1
0x338: 0200000000000000     | 	.quad 2
0x340: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x350:                      | 	.align 16
0x350:                      | Predest:
0x350: fadebc0000000000     | 	.quad 0xbcdefa
0x358:                      | dest:
0x358: abefcd0000000000     | 	.quad 0xcdefab
0x360: abefcd0000000000     | 	.quad 0xcdefab
0x368:                      | Postdest:
0x368: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x370:                      | .align 8
                            | # Run time stack
0x370: 0000000000000000     | 	.quad 0
0x378: 0000000000000000     | 	.quad 0
0x380: 0000000000000000     | 	.quad 0
0x388: 0000000000000000     | 	.quad 0
0x390: 0000000000000000     | 	.quad 0
0x398: 0000000000000000     | 	.quad 0
0x3a0: 0000000000000000     | 	.quad 0
0x3a8: 0000000000000000     | 	.quad 0
0x3b0: 0000000000000000     | 	.quad 0
0x3b8: 0000000000000000     | 	.quad 0
0x3c0: 0000000000000000     | 	.quad 0
0x3c8: 0000000000000000     | 	.quad 0
0x3d0: 0000000000000000     | 	.quad 0
0x3d8: 0000000000000000     | 	.quad 0
0x3e0: 0000000000000000     | 	.quad 0
0x3e8: 0000000000000000     | 	.quad 0
                            | 
0x3f0:                      | Stack:
