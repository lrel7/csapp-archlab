#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
#
# Describe how and why you modified the baseline code.
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
# Loop header
xorq %rax,%rax		    # count = 0;
jmp Test_Unrolling

Loop1:	
mrmovq (%rdi), %r10	    # read val from src...
rmmovq %r10, (%rsi)	    # ...and store it to dst
andq %r10, %r10		    # val <= 0?
jle Loop2		        # if so, goto next loop
iaddq $1, %rax          # count++

Loop2:	
mrmovq 8(%rdi), %r10	# read val from src...
rmmovq %r10, 8(%rsi)	# ...and store it to dst
andq %r10, %r10		    # val <= 0?
jle Loop3		        # if so, goto next loop
iaddq $1, %rax          # count++

Loop3:	
mrmovq 16(%rdi), %r10	# read val from src...
rmmovq %r10, 16(%rsi)	# ...and store it to dst
andq %r10, %r10		    # val <= 0?
jle Loop4		        # if so, goto next loop
iaddq $1, %rax          # count++

Loop4:	
mrmovq 24(%rdi), %r10	# read val from src...
rmmovq %r10, 24(%rsi)	# ...and store it to dst
iaddq $32, %rdi
iaddq $32, %rsi
andq %r10, %r10		    # val <= 0?
jle Test_Unrolling		# if so, goto next Test_Unrolling
iaddq $1, %rax          # count++

Test_Unrolling:
iaddq $-4, %rdx         # len >= 4?
jge Loop1

# Deal with remain data
# iaddq $4, %rdx          # add back %rdx
# jle Done                # if len <= 0, goto Done
# iaddq $-2, %rdx         # len < 2 (len == 1)?
# jl One
iaddq $3, %rdx          # now %rdx = len - 1
je One
jl Done

Unroll1:
mrmovq (%rdi), %r10	    # read val from src...
rmmovq %r10, (%rsi)	    # ...and store it to dst
andq %r10, %r10		    # val <= 0?
jle Unroll2		        # if so, skip counter increment
iaddq $1, %rax          # count++

Unroll2:
mrmovq 8(%rdi), %r10
rmmovq %r10, 8(%rsi)
iaddq $16, %rdi
iaddq $16, %rsi
andq %r10, %r10		    # val <= 0?
jle Test1		        # if so, skip counter increment
iaddq $1, %rax          # count++

Test1:
# andq %rdx, %rdx         # len <= 0?
# jle Done
iaddq $-2, %rdx         # len - 1 < 2 ? (len == 2)
jl Done

One:
mrmovq (%rdi), %r10	    # read val from src...
rmmovq %r10, (%rsi)	    # ...and store it to dst
andq %r10, %r10		    # val <= 0?
jle Done		        # if so, skip counter increment
iaddq $1, %rax          # count++
jmp Done

##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
