#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
#
# Author: Sum-Yuet Lee
# Date: 2024/5/22
#
# Describe how and why you modified the baseline code.
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
xorq %rax, %rax		        # count = 0;
iaddq $-8, %rdx             # %rdx < 8?
jl Remain                   # if so, goto Remain

Unroll:
Unroll_1:
mrmovq (%rdi), %r8      # read
rmmovq %r8, (%rsi)      # write
andq %r8, %r8		    # val <= 0?
jle Unroll_2		    # if so, goto next
iaddq $1, %rax          # count++

Unroll_2:
mrmovq 8(%rdi), %r9     # read
rmmovq %r9, 8(%rsi)     # write
andq %r9, %r9		    # val <= 0?
jle Unroll_3		    # if so, goto next
iaddq $1, %rax          # count++

Unroll_3:
mrmovq 16(%rdi), %r10   # read
rmmovq %r10, 16(%rsi)   # write
andq %r10, %r10		    # val <= 0?
jle Unroll_4		    # if so, goto next
iaddq $1, %rax          # count++

Unroll_4:
mrmovq 24(%rdi), %r11   # read
rmmovq %r11, 24(%rsi)   # write
andq %r11, %r11		    # val <= 0?
jle Unroll_5            # if so, goto next
iaddq $1, %rax          # count++

Unroll_5:
mrmovq 32(%rdi), %r12   # read
rmmovq %r12, 32(%rsi)   # write
andq %r12, %r12 	    # val <= 0?
jle Unroll_6	        # if so, goto next
iaddq $1, %rax          # count++

Unroll_6:
mrmovq 40(%rdi), %r13   # read
rmmovq %r13, 40(%rsi)   # write
andq %r13, %r13		    # val <= 0?
jle Unroll_7        	# if so, goto next
iaddq $1, %rax          # count++

Unroll_7:
mrmovq 48(%rdi), %r14   # read
rmmovq %r14, 48(%rsi)   # write
andq %r14, %r14		    # val <= 0?
jle Unroll_8            # if so, goto next
iaddq $1, %rax          # count++

Unroll_8:
mrmovq 56(%rdi), %rbx   # read
rmmovq %rbx, 56(%rsi)   # write
andq %rbx, %rbx		    # val <= 0?
jle Update		        # if so, goto Update
iaddq $1, %rax          # count++

Update:
# Increment src and dst
iaddq $64, %rdi
iaddq $64, %rsi
iaddq $-8, %rdx         # len >= 8? (now %rdx = len - 8)
jge Unroll              # if so, keep unrolling

# Deal with remain data
# %rdx may be -8 ~ -1
# BST judge
Remain:
iaddq $4, %rdx          # %rdx == -4? 
jl Node_6               # if %rdx < -4, goto Node_6
jg Node_2               # if %rdx > -4, goto Node_2
mrmovq 24(%rdi), %r11   # prepare for Remain_4
jmp Remain_4            # goto Remain_4

Node_6:
iaddq $2, %rdx          # %rdx == -6?
jl Node_7               # if %rdx < -6 (== -7), goto Node_7
jg Node_5               # if %rdx > -6 (== -5), goto Node_5
mrmovq 8(%rdi), %r9     # prepare for Remain_2
jmp Remain_2

Node_7:
iaddq $1, %rdx          # %rdx == -7?
jl Done                 # if %rdx < -7 (== -8), goto Done
mrmovq (%rdi), %r8      # prepare for Remain_1
jmp Remain_1

Node_5:
mrmovq 16(%rdi), %r10   # prepare for Remain_3
jmp Remain_3

Node_3:
mrmovq 32(%rdi), %r12   # prepare for Remain_5
jmp Remain_5

Node_2:
iaddq $-2, %rdx         # %rdx == -2?
jl Node_3               # if %rdx < -2 (== -3), goto Node_3
mrmovq 40(%rdi), %r13   # prepare for Remain_6
je Remain_6             # if %rdx == -2, goto Remain_6
                        # else, %rdx == -1, goto Remain_7

Remain_7:
mrmovq 48(%rdi), %r14   # read
rmmovq %r14, 48(%rsi)   # write
andq %r14, %r14
jle Remain_6
iaddq $1, %rax

Remain_6:
mrmovq 40(%rdi), %r13   # read
rmmovq %r13, 40(%rsi)   # write
andq %r13, %r13
jle Remain_5
iaddq $1, %rax

Remain_5:
mrmovq 32(%rdi), %r12   # read
rmmovq %r12, 32(%rsi)   # write
andq %r12, %r12
jle Remain_4
iaddq $1, %rax

Remain_4: 
mrmovq 24(%rdi), %r11   # read
rmmovq %r11, 24(%rsi)   # write
andq %r11, %r11
jle Remain_3
iaddq $1, %rax

Remain_3:  
mrmovq 16(%rdi), %r10   # read
rmmovq %r10, 16(%rsi)   # write
andq %r10, %r10
jle Remain_2
iaddq $1, %rax

Remain_2:  
mrmovq 8(%rdi), %r9     # read
rmmovq %r9, 8(%rsi)     # write
andq %r9, %r9
jle Remain_1
iaddq $1, %rax

Remain_1:  
mrmovq (%rdi), %r8      # read
rmmovq %r8, (%rsi)      # write
andq %r8, %r8
jle Done
iaddq $1, %rax

##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
