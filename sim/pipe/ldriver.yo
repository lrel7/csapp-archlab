                            | #######################################################################
                            | # Test for copying block of size 63;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f4e807000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f23f00000000000000 | 	irmovq $63, %rdx		# src and dst have 63 elements
0x014: 30f66805000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f76003000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Author: Sum-Yuet Lee
                            | # Date: 2024/5/22
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
0x032: 6300                 | xorq %rax, %rax		        # count = 0;
0x034: c0f2f8ffffffffffffff | iaddq $-8, %rdx             # %rdx < 8?
0x03e: 72b601000000000000   | jl Remain                   # if so, goto Remain
                            | 
0x047:                      | Unroll:
0x047:                      | Unroll_1:
0x047: 50870000000000000000 | mrmovq (%rdi), %r8      # read
0x051: 40860000000000000000 | rmmovq %r8, (%rsi)      # write
0x05b: 6288                 | andq %r8, %r8		    # val <= 0?
0x05d: 717000000000000000   | jle Unroll_2		    # if so, goto next
0x066: c0f00100000000000000 | iaddq $1, %rax          # count++
                            | 
0x070:                      | Unroll_2:
0x070: 50970800000000000000 | mrmovq 8(%rdi), %r9     # read
0x07a: 40960800000000000000 | rmmovq %r9, 8(%rsi)     # write
0x084: 6299                 | andq %r9, %r9		    # val <= 0?
0x086: 719900000000000000   | jle Unroll_3		    # if so, goto next
0x08f: c0f00100000000000000 | iaddq $1, %rax          # count++
                            | 
0x099:                      | Unroll_3:
0x099: 50a71000000000000000 | mrmovq 16(%rdi), %r10   # read
0x0a3: 40a61000000000000000 | rmmovq %r10, 16(%rsi)   # write
0x0ad: 62aa                 | andq %r10, %r10		    # val <= 0?
0x0af: 71c200000000000000   | jle Unroll_4		    # if so, goto next
0x0b8: c0f00100000000000000 | iaddq $1, %rax          # count++
                            | 
0x0c2:                      | Unroll_4:
0x0c2: 50b71800000000000000 | mrmovq 24(%rdi), %r11   # read
0x0cc: 40b61800000000000000 | rmmovq %r11, 24(%rsi)   # write
0x0d6: 62bb                 | andq %r11, %r11		    # val <= 0?
0x0d8: 71eb00000000000000   | jle Unroll_5            # if so, goto next
0x0e1: c0f00100000000000000 | iaddq $1, %rax          # count++
                            | 
0x0eb:                      | Unroll_5:
0x0eb: 50c72000000000000000 | mrmovq 32(%rdi), %r12   # read
0x0f5: 40c62000000000000000 | rmmovq %r12, 32(%rsi)   # write
0x0ff: 62cc                 | andq %r12, %r12 	    # val <= 0?
0x101: 711401000000000000   | jle Unroll_6	        # if so, goto next
0x10a: c0f00100000000000000 | iaddq $1, %rax          # count++
                            | 
0x114:                      | Unroll_6:
0x114: 50d72800000000000000 | mrmovq 40(%rdi), %r13   # read
0x11e: 40d62800000000000000 | rmmovq %r13, 40(%rsi)   # write
0x128: 62dd                 | andq %r13, %r13		    # val <= 0?
0x12a: 713d01000000000000   | jle Unroll_7        	# if so, goto next
0x133: c0f00100000000000000 | iaddq $1, %rax          # count++
                            | 
0x13d:                      | Unroll_7:
0x13d: 50e73000000000000000 | mrmovq 48(%rdi), %r14   # read
0x147: 40e63000000000000000 | rmmovq %r14, 48(%rsi)   # write
0x151: 62ee                 | andq %r14, %r14		    # val <= 0?
0x153: 716601000000000000   | jle Unroll_8            # if so, goto next
0x15c: c0f00100000000000000 | iaddq $1, %rax          # count++
                            | 
0x166:                      | Unroll_8:
0x166: 50373800000000000000 | mrmovq 56(%rdi), %rbx   # read
0x170: 40363800000000000000 | rmmovq %rbx, 56(%rsi)   # write
0x17a: 6233                 | andq %rbx, %rbx		    # val <= 0?
0x17c: 718f01000000000000   | jle Update		        # if so, goto Update
0x185: c0f00100000000000000 | iaddq $1, %rax          # count++
                            | 
0x18f:                      | Update:
                            | # Increment src and dst
0x18f: c0f74000000000000000 | iaddq $64, %rdi
0x199: c0f64000000000000000 | iaddq $64, %rsi
0x1a3: c0f2f8ffffffffffffff | iaddq $-8, %rdx         # len >= 8? (now %rdx = len - 8)
0x1ad: 754700000000000000   | jge Unroll              # if so, keep unrolling
                            | 
                            | # Deal with remaining data
0x1b6:                      | Remain:
0x1b6: c0f20800000000000000 | iaddq $8, %rdx          # now %rdx = len
0x1c0: 735a03000000000000   | je Done                 # if len == 0, done
0x1c9: c0f2ffffffffffffffff | iaddq $-1, %rdx
0x1d3: 733103000000000000   | je Remain_1             # if len == 1
0x1dc: c0f2ffffffffffffffff | iaddq $-1, %rdx
0x1e6: 730803000000000000   | je Remain_2             # if len == 2
0x1ef: c0f2ffffffffffffffff | iaddq $-1, %rdx
0x1f9: 73df02000000000000   | je Remain_3             # if len == 3
0x202: c0f2ffffffffffffffff | iaddq $-1, %rdx
0x20c: 73b602000000000000   | je Remain_4             # if len == 4
0x215: c0f2ffffffffffffffff | iaddq $-1, %rdx
0x21f: 738d02000000000000   | je Remain_5             # if len == 5
0x228: c0f2ffffffffffffffff | iaddq $-1, %rdx
0x232: 736402000000000000   | je Remain_6             # if len == 6
                            | 
0x23b:                      | Remain_7:
0x23b: 50e73000000000000000 | mrmovq 48(%rdi), %r14   # read
0x245: 40e63000000000000000 | rmmovq %r14, 48(%rsi)   # write
0x24f: 62ee                 | andq %r14, %r14
0x251: 716402000000000000   | jle Remain_6
0x25a: c0f00100000000000000 | iaddq $1, %rax
                            | 
0x264:                      | Remain_6:
0x264: 50d72800000000000000 | mrmovq 40(%rdi), %r13   # read
0x26e: 40d62800000000000000 | rmmovq %r13, 40(%rsi)   # write
0x278: 62dd                 | andq %r13, %r13
0x27a: 718d02000000000000   | jle Remain_5
0x283: c0f00100000000000000 | iaddq $1, %rax
                            | 
0x28d:                      | Remain_5:
0x28d: 50c72000000000000000 | mrmovq 32(%rdi), %r12   # read
0x297: 40c62000000000000000 | rmmovq %r12, 32(%rsi)   # write
0x2a1: 62cc                 | andq %r12, %r12
0x2a3: 71b602000000000000   | jle Remain_4
0x2ac: c0f00100000000000000 | iaddq $1, %rax
                            | 
0x2b6:                      | Remain_4: 
0x2b6: 50b71800000000000000 | mrmovq 24(%rdi), %r11   # read
0x2c0: 40b61800000000000000 | rmmovq %r11, 24(%rsi)   # write
0x2ca: 62bb                 | andq %r11, %r11
0x2cc: 71df02000000000000   | jle Remain_3
0x2d5: c0f00100000000000000 | iaddq $1, %rax
                            | 
0x2df:                      | Remain_3:  
0x2df: 50a71000000000000000 | mrmovq 16(%rdi), %r10   # read
0x2e9: 40a61000000000000000 | rmmovq %r10, 16(%rsi)   # write
0x2f3: 62aa                 | andq %r10, %r10
0x2f5: 710803000000000000   | jle Remain_2
0x2fe: c0f00100000000000000 | iaddq $1, %rax
                            | 
0x308:                      | Remain_2:  
0x308: 50970800000000000000 | mrmovq 8(%rdi), %r9     # read
0x312: 40960800000000000000 | rmmovq %r9, 8(%rsi)     # write
0x31c: 6299                 | andq %r9, %r9
0x31e: 713103000000000000   | jle Remain_1
0x327: c0f00100000000000000 | iaddq $1, %rax
                            | 
0x331:                      | Remain_1:  
0x331: 50870000000000000000 | mrmovq (%rdi), %r8      # read
0x33b: 40860000000000000000 | rmmovq %r8, (%rsi)      # write
0x345: 6288                 | andq %r8, %r8
0x347: 715a03000000000000   | jle Done
0x350: c0f00100000000000000 | iaddq $1, %rax
                            | 
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x35a:                      | Done:
0x35a: 90                   | ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x35b:                      | End:
                            | #/* $end ncopy-ys */
0x35b:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x360:                      | 	.align 8
0x360:                      | src:
0x360: 0100000000000000     | 	.quad 1
0x368: feffffffffffffff     | 	.quad -2
0x370: fdffffffffffffff     | 	.quad -3
0x378: 0400000000000000     | 	.quad 4
0x380: fbffffffffffffff     | 	.quad -5
0x388: faffffffffffffff     | 	.quad -6
0x390: 0700000000000000     | 	.quad 7
0x398: 0800000000000000     | 	.quad 8
0x3a0: 0900000000000000     | 	.quad 9
0x3a8: 0a00000000000000     | 	.quad 10
0x3b0: f5ffffffffffffff     | 	.quad -11
0x3b8: 0c00000000000000     | 	.quad 12
0x3c0: 0d00000000000000     | 	.quad 13
0x3c8: f2ffffffffffffff     | 	.quad -14
0x3d0: 0f00000000000000     | 	.quad 15
0x3d8: f0ffffffffffffff     | 	.quad -16
0x3e0: 1100000000000000     | 	.quad 17
0x3e8: eeffffffffffffff     | 	.quad -18
0x3f0: 1300000000000000     | 	.quad 19
0x3f8: 1400000000000000     | 	.quad 20
0x400: ebffffffffffffff     | 	.quad -21
0x408: eaffffffffffffff     | 	.quad -22
0x410: e9ffffffffffffff     | 	.quad -23
0x418: 1800000000000000     | 	.quad 24
0x420: e7ffffffffffffff     | 	.quad -25
0x428: 1a00000000000000     | 	.quad 26
0x430: e5ffffffffffffff     | 	.quad -27
0x438: 1c00000000000000     | 	.quad 28
0x440: e3ffffffffffffff     | 	.quad -29
0x448: 1e00000000000000     | 	.quad 30
0x450: 1f00000000000000     | 	.quad 31
0x458: 2000000000000000     | 	.quad 32
0x460: 2100000000000000     | 	.quad 33
0x468: 2200000000000000     | 	.quad 34
0x470: 2300000000000000     | 	.quad 35
0x478: 2400000000000000     | 	.quad 36
0x480: dbffffffffffffff     | 	.quad -37
0x488: daffffffffffffff     | 	.quad -38
0x490: 2700000000000000     | 	.quad 39
0x498: 2800000000000000     | 	.quad 40
0x4a0: 2900000000000000     | 	.quad 41
0x4a8: d6ffffffffffffff     | 	.quad -42
0x4b0: 2b00000000000000     | 	.quad 43
0x4b8: 2c00000000000000     | 	.quad 44
0x4c0: d3ffffffffffffff     | 	.quad -45
0x4c8: 2e00000000000000     | 	.quad 46
0x4d0: 2f00000000000000     | 	.quad 47
0x4d8: 3000000000000000     | 	.quad 48
0x4e0: 3100000000000000     | 	.quad 49
0x4e8: ceffffffffffffff     | 	.quad -50
0x4f0: cdffffffffffffff     | 	.quad -51
0x4f8: ccffffffffffffff     | 	.quad -52
0x500: cbffffffffffffff     | 	.quad -53
0x508: caffffffffffffff     | 	.quad -54
0x510: c9ffffffffffffff     | 	.quad -55
0x518: c8ffffffffffffff     | 	.quad -56
0x520: c7ffffffffffffff     | 	.quad -57
0x528: c6ffffffffffffff     | 	.quad -58
0x530: c5ffffffffffffff     | 	.quad -59
0x538: c4ffffffffffffff     | 	.quad -60
0x540: c3ffffffffffffff     | 	.quad -61
0x548: c2ffffffffffffff     | 	.quad -62
0x550: c1ffffffffffffff     | 	.quad -63
0x558: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x560:                      | 	.align 16
0x560:                      | Predest:
0x560: fadebc0000000000     | 	.quad 0xbcdefa
0x568:                      | dest:
0x568: abefcd0000000000     | 	.quad 0xcdefab
0x570: abefcd0000000000     | 	.quad 0xcdefab
0x578: abefcd0000000000     | 	.quad 0xcdefab
0x580: abefcd0000000000     | 	.quad 0xcdefab
0x588: abefcd0000000000     | 	.quad 0xcdefab
0x590: abefcd0000000000     | 	.quad 0xcdefab
0x598: abefcd0000000000     | 	.quad 0xcdefab
0x5a0: abefcd0000000000     | 	.quad 0xcdefab
0x5a8: abefcd0000000000     | 	.quad 0xcdefab
0x5b0: abefcd0000000000     | 	.quad 0xcdefab
0x5b8: abefcd0000000000     | 	.quad 0xcdefab
0x5c0: abefcd0000000000     | 	.quad 0xcdefab
0x5c8: abefcd0000000000     | 	.quad 0xcdefab
0x5d0: abefcd0000000000     | 	.quad 0xcdefab
0x5d8: abefcd0000000000     | 	.quad 0xcdefab
0x5e0: abefcd0000000000     | 	.quad 0xcdefab
0x5e8: abefcd0000000000     | 	.quad 0xcdefab
0x5f0: abefcd0000000000     | 	.quad 0xcdefab
0x5f8: abefcd0000000000     | 	.quad 0xcdefab
0x600: abefcd0000000000     | 	.quad 0xcdefab
0x608: abefcd0000000000     | 	.quad 0xcdefab
0x610: abefcd0000000000     | 	.quad 0xcdefab
0x618: abefcd0000000000     | 	.quad 0xcdefab
0x620: abefcd0000000000     | 	.quad 0xcdefab
0x628: abefcd0000000000     | 	.quad 0xcdefab
0x630: abefcd0000000000     | 	.quad 0xcdefab
0x638: abefcd0000000000     | 	.quad 0xcdefab
0x640: abefcd0000000000     | 	.quad 0xcdefab
0x648: abefcd0000000000     | 	.quad 0xcdefab
0x650: abefcd0000000000     | 	.quad 0xcdefab
0x658: abefcd0000000000     | 	.quad 0xcdefab
0x660: abefcd0000000000     | 	.quad 0xcdefab
0x668: abefcd0000000000     | 	.quad 0xcdefab
0x670: abefcd0000000000     | 	.quad 0xcdefab
0x678: abefcd0000000000     | 	.quad 0xcdefab
0x680: abefcd0000000000     | 	.quad 0xcdefab
0x688: abefcd0000000000     | 	.quad 0xcdefab
0x690: abefcd0000000000     | 	.quad 0xcdefab
0x698: abefcd0000000000     | 	.quad 0xcdefab
0x6a0: abefcd0000000000     | 	.quad 0xcdefab
0x6a8: abefcd0000000000     | 	.quad 0xcdefab
0x6b0: abefcd0000000000     | 	.quad 0xcdefab
0x6b8: abefcd0000000000     | 	.quad 0xcdefab
0x6c0: abefcd0000000000     | 	.quad 0xcdefab
0x6c8: abefcd0000000000     | 	.quad 0xcdefab
0x6d0: abefcd0000000000     | 	.quad 0xcdefab
0x6d8: abefcd0000000000     | 	.quad 0xcdefab
0x6e0: abefcd0000000000     | 	.quad 0xcdefab
0x6e8: abefcd0000000000     | 	.quad 0xcdefab
0x6f0: abefcd0000000000     | 	.quad 0xcdefab
0x6f8: abefcd0000000000     | 	.quad 0xcdefab
0x700: abefcd0000000000     | 	.quad 0xcdefab
0x708: abefcd0000000000     | 	.quad 0xcdefab
0x710: abefcd0000000000     | 	.quad 0xcdefab
0x718: abefcd0000000000     | 	.quad 0xcdefab
0x720: abefcd0000000000     | 	.quad 0xcdefab
0x728: abefcd0000000000     | 	.quad 0xcdefab
0x730: abefcd0000000000     | 	.quad 0xcdefab
0x738: abefcd0000000000     | 	.quad 0xcdefab
0x740: abefcd0000000000     | 	.quad 0xcdefab
0x748: abefcd0000000000     | 	.quad 0xcdefab
0x750: abefcd0000000000     | 	.quad 0xcdefab
0x758: abefcd0000000000     | 	.quad 0xcdefab
0x760:                      | Postdest:
0x760: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x768:                      | .align 8
                            | # Run time stack
0x768: 0000000000000000     | 	.quad 0
0x770: 0000000000000000     | 	.quad 0
0x778: 0000000000000000     | 	.quad 0
0x780: 0000000000000000     | 	.quad 0
0x788: 0000000000000000     | 	.quad 0
0x790: 0000000000000000     | 	.quad 0
0x798: 0000000000000000     | 	.quad 0
0x7a0: 0000000000000000     | 	.quad 0
0x7a8: 0000000000000000     | 	.quad 0
0x7b0: 0000000000000000     | 	.quad 0
0x7b8: 0000000000000000     | 	.quad 0
0x7c0: 0000000000000000     | 	.quad 0
0x7c8: 0000000000000000     | 	.quad 0
0x7d0: 0000000000000000     | 	.quad 0
0x7d8: 0000000000000000     | 	.quad 0
0x7e0: 0000000000000000     | 	.quad 0
                            | 
0x7e8:                      | Stack:
