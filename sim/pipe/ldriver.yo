                            | #######################################################################
                            | # Test for copying block of size 63;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f45806000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f23f00000000000000 | 	irmovq $63, %rdx		# src and dst have 63 elements
0x014: 30f6d803000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f7d001000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | # Loop header
0x032: 6300                 | xorq %rax,%rax		    # count = 0;
                            | 
0x034:                      | Main_Loop:
0x034: c0f2faffffffffffffff | iaddq $-6, %rdx         # len < 6?
0x03e: 725a01000000000000   | jl Remain               # if so, goto Remain:
                            | 
0x047:                      | Loop1:	
0x047: 50a70000000000000000 | mrmovq (%rdi), %r10	    # read val from src...
0x051: 40a60000000000000000 | rmmovq %r10, (%rsi)	    # ...and store it to dst
0x05b: 62aa                 | andq %r10, %r10		    # val <= 0?
0x05d: 717000000000000000   | jle Loop2		        # if so, goto next loop
0x066: c0f00100000000000000 | iaddq $1, %rax          # count++
                            | 
0x070:                      | Loop2:	
0x070: 50a70800000000000000 | mrmovq 8(%rdi), %r10	# read val from src...
0x07a: 40a60800000000000000 | rmmovq %r10, 8(%rsi)	# ...and store it to dst
0x084: 62aa                 | andq %r10, %r10		    # val <= 0?
0x086: 719900000000000000   | jle Loop3		        # if so, goto next loop
0x08f: c0f00100000000000000 | iaddq $1, %rax          # count++
                            | 
0x099:                      | Loop3:	
0x099: 50a71000000000000000 | mrmovq 16(%rdi), %r10	# read val from src...
0x0a3: 40a61000000000000000 | rmmovq %r10, 16(%rsi)	# ...and store it to dst
0x0ad: 62aa                 | andq %r10, %r10		    # val <= 0?
0x0af: 71c200000000000000   | jle Loop4		        # if so, goto next loop
0x0b8: c0f00100000000000000 | iaddq $1, %rax          # count++
                            | 
0x0c2:                      | Loop4:	
0x0c2: 50a71800000000000000 | mrmovq 24(%rdi), %r10	# read val from src...
0x0cc: 40a61800000000000000 | rmmovq %r10, 24(%rsi)	# ...and store it to dst
0x0d6: 62aa                 | andq %r10, %r10		    # val <= 0?
0x0d8: 71eb00000000000000   | jle Loop5		        # if so, goto next loop
0x0e1: c0f00100000000000000 | iaddq $1, %rax          # count++
                            | 
0x0eb:                      | Loop5:	
0x0eb: 50a72000000000000000 | mrmovq 32(%rdi), %r10	# read val from src...
0x0f5: 40a62000000000000000 | rmmovq %r10, 32(%rsi)	# ...and store it to dst
0x0ff: 62aa                 | andq %r10, %r10		    # val <= 0?
0x101: 711401000000000000   | jle Loop6		        # if so, goto next loop
0x10a: c0f00100000000000000 | iaddq $1, %rax          # count++
                            | 
0x114:                      | Loop6:	
0x114: 50a72800000000000000 | mrmovq 40(%rdi), %r10	# read val from src...
0x11e: 40a62800000000000000 | rmmovq %r10, 40(%rsi)	# ...and store it to dst
0x128: c0f73000000000000000 | iaddq $48, %rdi         # increment src
0x132: c0f63000000000000000 | iaddq $48, %rsi         # increment dst
0x13c: 62aa                 | andq %r10, %r10		    # val <= 0?
0x13e: 713400000000000000   | jle Main_Loop		    # if so, goto next loop
0x147: c0f00100000000000000 | iaddq $1, %rax          # count++
0x151: 703400000000000000   | jmp Main_Loop
                            | 
0x15a:                      | Remain:
0x15a: c0f20600000000000000 | iaddq $6, %rdx          # add back %rdx
0x164: 71c801000000000000   | jle Done                # if len <= 0, goto Done
                            | 
0x16d:                      | Remain_Loop:
0x16d: 50a70000000000000000 | mrmovq (%rdi), %r10	    # read val from src...
0x177: 40a60000000000000000 | rmmovq %r10, (%rsi)	    # ...and store it to dst
0x181: 62aa                 | andq %r10, %r10		    # val <= 0?
0x183: 719601000000000000   | jle Test		        # if so, skip counter increment
0x18c: c0f00100000000000000 | iaddq $1, %rax          # count++
                            | 
0x196:                      | Test:
0x196: c0f2ffffffffffffffff | iaddq $-1, %rdx         # decrement %rdx
0x1a0: 6222                 | andq %rdx,%rdx		    # len <= 0?
0x1a2: 71c801000000000000   | jle Done		        # if so, goto Done:
0x1ab: c0f70800000000000000 | iaddq $8, %rdi          # increment src
0x1b5: c0f60800000000000000 | iaddq $8, %rsi          # increment dst
0x1bf: 706d01000000000000   | jmp Remain_Loop
                            | 
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x1c8:                      | Done:
0x1c8: 90                   | ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x1c9:                      | End:
                            | #/* $end ncopy-ys */
0x1c9:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x1d0:                      | 	.align 8
0x1d0:                      | src:
0x1d0: ffffffffffffffff     | 	.quad -1
0x1d8: feffffffffffffff     | 	.quad -2
0x1e0: fdffffffffffffff     | 	.quad -3
0x1e8: 0400000000000000     | 	.quad 4
0x1f0: fbffffffffffffff     | 	.quad -5
0x1f8: 0600000000000000     | 	.quad 6
0x200: 0700000000000000     | 	.quad 7
0x208: 0800000000000000     | 	.quad 8
0x210: 0900000000000000     | 	.quad 9
0x218: f6ffffffffffffff     | 	.quad -10
0x220: f5ffffffffffffff     | 	.quad -11
0x228: f4ffffffffffffff     | 	.quad -12
0x230: f3ffffffffffffff     | 	.quad -13
0x238: 0e00000000000000     | 	.quad 14
0x240: f1ffffffffffffff     | 	.quad -15
0x248: 1000000000000000     | 	.quad 16
0x250: 1100000000000000     | 	.quad 17
0x258: 1200000000000000     | 	.quad 18
0x260: edffffffffffffff     | 	.quad -19
0x268: 1400000000000000     | 	.quad 20
0x270: 1500000000000000     | 	.quad 21
0x278: 1600000000000000     | 	.quad 22
0x280: e9ffffffffffffff     | 	.quad -23
0x288: 1800000000000000     | 	.quad 24
0x290: e7ffffffffffffff     | 	.quad -25
0x298: e6ffffffffffffff     | 	.quad -26
0x2a0: 1b00000000000000     | 	.quad 27
0x2a8: e4ffffffffffffff     | 	.quad -28
0x2b0: e3ffffffffffffff     | 	.quad -29
0x2b8: 1e00000000000000     | 	.quad 30
0x2c0: e1ffffffffffffff     | 	.quad -31
0x2c8: e0ffffffffffffff     | 	.quad -32
0x2d0: 2100000000000000     | 	.quad 33
0x2d8: 2200000000000000     | 	.quad 34
0x2e0: ddffffffffffffff     | 	.quad -35
0x2e8: 2400000000000000     | 	.quad 36
0x2f0: dbffffffffffffff     | 	.quad -37
0x2f8: daffffffffffffff     | 	.quad -38
0x300: 2700000000000000     | 	.quad 39
0x308: 2800000000000000     | 	.quad 40
0x310: 2900000000000000     | 	.quad 41
0x318: d6ffffffffffffff     | 	.quad -42
0x320: d5ffffffffffffff     | 	.quad -43
0x328: d4ffffffffffffff     | 	.quad -44
0x330: 2d00000000000000     | 	.quad 45
0x338: d2ffffffffffffff     | 	.quad -46
0x340: 2f00000000000000     | 	.quad 47
0x348: d0ffffffffffffff     | 	.quad -48
0x350: cfffffffffffffff     | 	.quad -49
0x358: 3200000000000000     | 	.quad 50
0x360: 3300000000000000     | 	.quad 51
0x368: ccffffffffffffff     | 	.quad -52
0x370: cbffffffffffffff     | 	.quad -53
0x378: caffffffffffffff     | 	.quad -54
0x380: c9ffffffffffffff     | 	.quad -55
0x388: c8ffffffffffffff     | 	.quad -56
0x390: 3900000000000000     | 	.quad 57
0x398: c6ffffffffffffff     | 	.quad -58
0x3a0: 3b00000000000000     | 	.quad 59
0x3a8: 3c00000000000000     | 	.quad 60
0x3b0: 3d00000000000000     | 	.quad 61
0x3b8: 3e00000000000000     | 	.quad 62
0x3c0: 3f00000000000000     | 	.quad 63
0x3c8: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x3d0:                      | 	.align 16
0x3d0:                      | Predest:
0x3d0: fadebc0000000000     | 	.quad 0xbcdefa
0x3d8:                      | dest:
0x3d8: abefcd0000000000     | 	.quad 0xcdefab
0x3e0: abefcd0000000000     | 	.quad 0xcdefab
0x3e8: abefcd0000000000     | 	.quad 0xcdefab
0x3f0: abefcd0000000000     | 	.quad 0xcdefab
0x3f8: abefcd0000000000     | 	.quad 0xcdefab
0x400: abefcd0000000000     | 	.quad 0xcdefab
0x408: abefcd0000000000     | 	.quad 0xcdefab
0x410: abefcd0000000000     | 	.quad 0xcdefab
0x418: abefcd0000000000     | 	.quad 0xcdefab
0x420: abefcd0000000000     | 	.quad 0xcdefab
0x428: abefcd0000000000     | 	.quad 0xcdefab
0x430: abefcd0000000000     | 	.quad 0xcdefab
0x438: abefcd0000000000     | 	.quad 0xcdefab
0x440: abefcd0000000000     | 	.quad 0xcdefab
0x448: abefcd0000000000     | 	.quad 0xcdefab
0x450: abefcd0000000000     | 	.quad 0xcdefab
0x458: abefcd0000000000     | 	.quad 0xcdefab
0x460: abefcd0000000000     | 	.quad 0xcdefab
0x468: abefcd0000000000     | 	.quad 0xcdefab
0x470: abefcd0000000000     | 	.quad 0xcdefab
0x478: abefcd0000000000     | 	.quad 0xcdefab
0x480: abefcd0000000000     | 	.quad 0xcdefab
0x488: abefcd0000000000     | 	.quad 0xcdefab
0x490: abefcd0000000000     | 	.quad 0xcdefab
0x498: abefcd0000000000     | 	.quad 0xcdefab
0x4a0: abefcd0000000000     | 	.quad 0xcdefab
0x4a8: abefcd0000000000     | 	.quad 0xcdefab
0x4b0: abefcd0000000000     | 	.quad 0xcdefab
0x4b8: abefcd0000000000     | 	.quad 0xcdefab
0x4c0: abefcd0000000000     | 	.quad 0xcdefab
0x4c8: abefcd0000000000     | 	.quad 0xcdefab
0x4d0: abefcd0000000000     | 	.quad 0xcdefab
0x4d8: abefcd0000000000     | 	.quad 0xcdefab
0x4e0: abefcd0000000000     | 	.quad 0xcdefab
0x4e8: abefcd0000000000     | 	.quad 0xcdefab
0x4f0: abefcd0000000000     | 	.quad 0xcdefab
0x4f8: abefcd0000000000     | 	.quad 0xcdefab
0x500: abefcd0000000000     | 	.quad 0xcdefab
0x508: abefcd0000000000     | 	.quad 0xcdefab
0x510: abefcd0000000000     | 	.quad 0xcdefab
0x518: abefcd0000000000     | 	.quad 0xcdefab
0x520: abefcd0000000000     | 	.quad 0xcdefab
0x528: abefcd0000000000     | 	.quad 0xcdefab
0x530: abefcd0000000000     | 	.quad 0xcdefab
0x538: abefcd0000000000     | 	.quad 0xcdefab
0x540: abefcd0000000000     | 	.quad 0xcdefab
0x548: abefcd0000000000     | 	.quad 0xcdefab
0x550: abefcd0000000000     | 	.quad 0xcdefab
0x558: abefcd0000000000     | 	.quad 0xcdefab
0x560: abefcd0000000000     | 	.quad 0xcdefab
0x568: abefcd0000000000     | 	.quad 0xcdefab
0x570: abefcd0000000000     | 	.quad 0xcdefab
0x578: abefcd0000000000     | 	.quad 0xcdefab
0x580: abefcd0000000000     | 	.quad 0xcdefab
0x588: abefcd0000000000     | 	.quad 0xcdefab
0x590: abefcd0000000000     | 	.quad 0xcdefab
0x598: abefcd0000000000     | 	.quad 0xcdefab
0x5a0: abefcd0000000000     | 	.quad 0xcdefab
0x5a8: abefcd0000000000     | 	.quad 0xcdefab
0x5b0: abefcd0000000000     | 	.quad 0xcdefab
0x5b8: abefcd0000000000     | 	.quad 0xcdefab
0x5c0: abefcd0000000000     | 	.quad 0xcdefab
0x5c8: abefcd0000000000     | 	.quad 0xcdefab
0x5d0:                      | Postdest:
0x5d0: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x5d8:                      | .align 8
                            | # Run time stack
0x5d8: 0000000000000000     | 	.quad 0
0x5e0: 0000000000000000     | 	.quad 0
0x5e8: 0000000000000000     | 	.quad 0
0x5f0: 0000000000000000     | 	.quad 0
0x5f8: 0000000000000000     | 	.quad 0
0x600: 0000000000000000     | 	.quad 0
0x608: 0000000000000000     | 	.quad 0
0x610: 0000000000000000     | 	.quad 0
0x618: 0000000000000000     | 	.quad 0
0x620: 0000000000000000     | 	.quad 0
0x628: 0000000000000000     | 	.quad 0
0x630: 0000000000000000     | 	.quad 0
0x638: 0000000000000000     | 	.quad 0
0x640: 0000000000000000     | 	.quad 0
0x648: 0000000000000000     | 	.quad 0
0x650: 0000000000000000     | 	.quad 0
                            | 
0x658:                      | Stack:
