                            | #######################################################################
                            | # Test for copying block of size 63;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f46806000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f23f00000000000000 | 	irmovq $63, %rdx		# src and dst have 63 elements
0x014: 30f6e803000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f7d801000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | # Loop header
0x032: 6300                 | xorq %rax,%rax		    # count = 0;
0x034: 70f500000000000000   | jmp Test_Unrolling
                            | 
0x03d:                      | Loop1:	
0x03d: 50a70000000000000000 | mrmovq (%rdi), %r10	    # read val from src...
0x047: 40a60000000000000000 | rmmovq %r10, (%rsi)	    # ...and store it to dst
0x051: 62aa                 | andq %r10, %r10		    # val <= 0?
0x053: 716600000000000000   | jle Loop2		        # if so, goto next loop
0x05c: c0f00100000000000000 | iaddq $1, %rax          # count++
                            | 
0x066:                      | Loop2:	
0x066: 50a70800000000000000 | mrmovq 8(%rdi), %r10	# read val from src...
0x070: 40a60800000000000000 | rmmovq %r10, 8(%rsi)	# ...and store it to dst
0x07a: 62aa                 | andq %r10, %r10		    # val <= 0?
0x07c: 718f00000000000000   | jle Loop3		        # if so, goto next loop
0x085: c0f00100000000000000 | iaddq $1, %rax          # count++
                            | 
0x08f:                      | Loop3:	
0x08f: 50a71000000000000000 | mrmovq 16(%rdi), %r10	# read val from src...
0x099: 40a61000000000000000 | rmmovq %r10, 16(%rsi)	# ...and store it to dst
0x0a3: 62aa                 | andq %r10, %r10		    # val <= 0?
0x0a5: 71b800000000000000   | jle Loop4		        # if so, goto next loop
0x0ae: c0f00100000000000000 | iaddq $1, %rax          # count++
                            | 
0x0b8:                      | Loop4:	
0x0b8: 50a71800000000000000 | mrmovq 24(%rdi), %r10	# read val from src...
0x0c2: 40a61800000000000000 | rmmovq %r10, 24(%rsi)	# ...and store it to dst
0x0cc: c0f72000000000000000 | iaddq $32, %rdi
0x0d6: c0f62000000000000000 | iaddq $32, %rsi
0x0e0: 62aa                 | andq %r10, %r10		    # val <= 0?
0x0e2: 71f500000000000000   | jle Test_Unrolling		# if so, goto next Test_Unrolling
0x0eb: c0f00100000000000000 | iaddq $1, %rax          # count++
                            | 
0x0f5:                      | Test_Unrolling:
0x0f5: c0f2fcffffffffffffff | iaddq $-4, %rdx         # len >= 4?
0x0ff: 753d00000000000000   | jge Loop1
                            | 
                            | # Deal with remain data
0x108: c0f20400000000000000 | iaddq $4, %rdx          # add back %rdx
0x112: 71d101000000000000   | jle Done                # if len <= 0, goto Done
0x11b: c0f2feffffffffffffff | iaddq $-2, %rdx         # len < 2 (len == 1)?
0x125: 729f01000000000000   | jl One
                            | 
0x12e:                      | Unroll1:
0x12e: 50a70000000000000000 | mrmovq (%rdi), %r10	    # read val from src...
0x138: 40a60000000000000000 | rmmovq %r10, (%rsi)	    # ...and store it to dst
0x142: 62aa                 | andq %r10, %r10		    # val <= 0?
0x144: 715701000000000000   | jle Unroll2		        # if so, skip counter increment
0x14d: c0f00100000000000000 | iaddq $1, %rax          # count++
                            | 
0x157:                      | Unroll2:
0x157: 50a70800000000000000 | mrmovq 8(%rdi), %r10
0x161: 40a60800000000000000 | rmmovq %r10, 8(%rsi)
0x16b: c0f71000000000000000 | iaddq $16, %rdi
0x175: c0f61000000000000000 | iaddq $16, %rsi
0x17f: 62aa                 | andq %r10, %r10		    # val <= 0?
0x181: 719401000000000000   | jle Test1		        # if so, skip counter increment
0x18a: c0f00100000000000000 | iaddq $1, %rax          # count++
                            | 
0x194:                      | Test1:
0x194: 6222                 | andq %rdx, %rdx         # len <= 0?
0x196: 71d101000000000000   | jle Done
                            | 
0x19f:                      | One:
0x19f: 50a70000000000000000 | mrmovq (%rdi), %r10	    # read val from src...
0x1a9: 40a60000000000000000 | rmmovq %r10, (%rsi)	    # ...and store it to dst
0x1b3: 62aa                 | andq %r10, %r10		    # val <= 0?
0x1b5: 71d101000000000000   | jle Done		        # if so, skip counter increment
0x1be: c0f00100000000000000 | iaddq $1, %rax          # count++
0x1c8: 70d101000000000000   | jmp Done
                            | 
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x1d1:                      | Done:
0x1d1: 90                   | ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x1d2:                      | End:
                            | #/* $end ncopy-ys */
0x1d2:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x1d8:                      | 	.align 8
0x1d8:                      | src:
0x1d8: 0100000000000000     | 	.quad 1
0x1e0: feffffffffffffff     | 	.quad -2
0x1e8: 0300000000000000     | 	.quad 3
0x1f0: 0400000000000000     | 	.quad 4
0x1f8: 0500000000000000     | 	.quad 5
0x200: 0600000000000000     | 	.quad 6
0x208: 0700000000000000     | 	.quad 7
0x210: f8ffffffffffffff     | 	.quad -8
0x218: 0900000000000000     | 	.quad 9
0x220: f6ffffffffffffff     | 	.quad -10
0x228: f5ffffffffffffff     | 	.quad -11
0x230: f4ffffffffffffff     | 	.quad -12
0x238: 0d00000000000000     | 	.quad 13
0x240: f2ffffffffffffff     | 	.quad -14
0x248: f1ffffffffffffff     | 	.quad -15
0x250: 1000000000000000     | 	.quad 16
0x258: 1100000000000000     | 	.quad 17
0x260: eeffffffffffffff     | 	.quad -18
0x268: 1300000000000000     | 	.quad 19
0x270: ecffffffffffffff     | 	.quad -20
0x278: 1500000000000000     | 	.quad 21
0x280: 1600000000000000     | 	.quad 22
0x288: e9ffffffffffffff     | 	.quad -23
0x290: e8ffffffffffffff     | 	.quad -24
0x298: e7ffffffffffffff     | 	.quad -25
0x2a0: 1a00000000000000     | 	.quad 26
0x2a8: 1b00000000000000     | 	.quad 27
0x2b0: 1c00000000000000     | 	.quad 28
0x2b8: 1d00000000000000     | 	.quad 29
0x2c0: 1e00000000000000     | 	.quad 30
0x2c8: e1ffffffffffffff     | 	.quad -31
0x2d0: e0ffffffffffffff     | 	.quad -32
0x2d8: dfffffffffffffff     | 	.quad -33
0x2e0: 2200000000000000     | 	.quad 34
0x2e8: 2300000000000000     | 	.quad 35
0x2f0: dcffffffffffffff     | 	.quad -36
0x2f8: dbffffffffffffff     | 	.quad -37
0x300: daffffffffffffff     | 	.quad -38
0x308: d9ffffffffffffff     | 	.quad -39
0x310: 2800000000000000     | 	.quad 40
0x318: 2900000000000000     | 	.quad 41
0x320: d6ffffffffffffff     | 	.quad -42
0x328: d5ffffffffffffff     | 	.quad -43
0x330: d4ffffffffffffff     | 	.quad -44
0x338: d3ffffffffffffff     | 	.quad -45
0x340: d2ffffffffffffff     | 	.quad -46
0x348: d1ffffffffffffff     | 	.quad -47
0x350: 3000000000000000     | 	.quad 48
0x358: cfffffffffffffff     | 	.quad -49
0x360: 3200000000000000     | 	.quad 50
0x368: cdffffffffffffff     | 	.quad -51
0x370: ccffffffffffffff     | 	.quad -52
0x378: cbffffffffffffff     | 	.quad -53
0x380: 3600000000000000     | 	.quad 54
0x388: c9ffffffffffffff     | 	.quad -55
0x390: 3800000000000000     | 	.quad 56
0x398: 3900000000000000     | 	.quad 57
0x3a0: 3a00000000000000     | 	.quad 58
0x3a8: 3b00000000000000     | 	.quad 59
0x3b0: 3c00000000000000     | 	.quad 60
0x3b8: 3d00000000000000     | 	.quad 61
0x3c0: c2ffffffffffffff     | 	.quad -62
0x3c8: c1ffffffffffffff     | 	.quad -63
0x3d0: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x3e0:                      | 	.align 16
0x3e0:                      | Predest:
0x3e0: fadebc0000000000     | 	.quad 0xbcdefa
0x3e8:                      | dest:
0x3e8: abefcd0000000000     | 	.quad 0xcdefab
0x3f0: abefcd0000000000     | 	.quad 0xcdefab
0x3f8: abefcd0000000000     | 	.quad 0xcdefab
0x400: abefcd0000000000     | 	.quad 0xcdefab
0x408: abefcd0000000000     | 	.quad 0xcdefab
0x410: abefcd0000000000     | 	.quad 0xcdefab
0x418: abefcd0000000000     | 	.quad 0xcdefab
0x420: abefcd0000000000     | 	.quad 0xcdefab
0x428: abefcd0000000000     | 	.quad 0xcdefab
0x430: abefcd0000000000     | 	.quad 0xcdefab
0x438: abefcd0000000000     | 	.quad 0xcdefab
0x440: abefcd0000000000     | 	.quad 0xcdefab
0x448: abefcd0000000000     | 	.quad 0xcdefab
0x450: abefcd0000000000     | 	.quad 0xcdefab
0x458: abefcd0000000000     | 	.quad 0xcdefab
0x460: abefcd0000000000     | 	.quad 0xcdefab
0x468: abefcd0000000000     | 	.quad 0xcdefab
0x470: abefcd0000000000     | 	.quad 0xcdefab
0x478: abefcd0000000000     | 	.quad 0xcdefab
0x480: abefcd0000000000     | 	.quad 0xcdefab
0x488: abefcd0000000000     | 	.quad 0xcdefab
0x490: abefcd0000000000     | 	.quad 0xcdefab
0x498: abefcd0000000000     | 	.quad 0xcdefab
0x4a0: abefcd0000000000     | 	.quad 0xcdefab
0x4a8: abefcd0000000000     | 	.quad 0xcdefab
0x4b0: abefcd0000000000     | 	.quad 0xcdefab
0x4b8: abefcd0000000000     | 	.quad 0xcdefab
0x4c0: abefcd0000000000     | 	.quad 0xcdefab
0x4c8: abefcd0000000000     | 	.quad 0xcdefab
0x4d0: abefcd0000000000     | 	.quad 0xcdefab
0x4d8: abefcd0000000000     | 	.quad 0xcdefab
0x4e0: abefcd0000000000     | 	.quad 0xcdefab
0x4e8: abefcd0000000000     | 	.quad 0xcdefab
0x4f0: abefcd0000000000     | 	.quad 0xcdefab
0x4f8: abefcd0000000000     | 	.quad 0xcdefab
0x500: abefcd0000000000     | 	.quad 0xcdefab
0x508: abefcd0000000000     | 	.quad 0xcdefab
0x510: abefcd0000000000     | 	.quad 0xcdefab
0x518: abefcd0000000000     | 	.quad 0xcdefab
0x520: abefcd0000000000     | 	.quad 0xcdefab
0x528: abefcd0000000000     | 	.quad 0xcdefab
0x530: abefcd0000000000     | 	.quad 0xcdefab
0x538: abefcd0000000000     | 	.quad 0xcdefab
0x540: abefcd0000000000     | 	.quad 0xcdefab
0x548: abefcd0000000000     | 	.quad 0xcdefab
0x550: abefcd0000000000     | 	.quad 0xcdefab
0x558: abefcd0000000000     | 	.quad 0xcdefab
0x560: abefcd0000000000     | 	.quad 0xcdefab
0x568: abefcd0000000000     | 	.quad 0xcdefab
0x570: abefcd0000000000     | 	.quad 0xcdefab
0x578: abefcd0000000000     | 	.quad 0xcdefab
0x580: abefcd0000000000     | 	.quad 0xcdefab
0x588: abefcd0000000000     | 	.quad 0xcdefab
0x590: abefcd0000000000     | 	.quad 0xcdefab
0x598: abefcd0000000000     | 	.quad 0xcdefab
0x5a0: abefcd0000000000     | 	.quad 0xcdefab
0x5a8: abefcd0000000000     | 	.quad 0xcdefab
0x5b0: abefcd0000000000     | 	.quad 0xcdefab
0x5b8: abefcd0000000000     | 	.quad 0xcdefab
0x5c0: abefcd0000000000     | 	.quad 0xcdefab
0x5c8: abefcd0000000000     | 	.quad 0xcdefab
0x5d0: abefcd0000000000     | 	.quad 0xcdefab
0x5d8: abefcd0000000000     | 	.quad 0xcdefab
0x5e0:                      | Postdest:
0x5e0: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x5e8:                      | .align 8
                            | # Run time stack
0x5e8: 0000000000000000     | 	.quad 0
0x5f0: 0000000000000000     | 	.quad 0
0x5f8: 0000000000000000     | 	.quad 0
0x600: 0000000000000000     | 	.quad 0
0x608: 0000000000000000     | 	.quad 0
0x610: 0000000000000000     | 	.quad 0
0x618: 0000000000000000     | 	.quad 0
0x620: 0000000000000000     | 	.quad 0
0x628: 0000000000000000     | 	.quad 0
0x630: 0000000000000000     | 	.quad 0
0x638: 0000000000000000     | 	.quad 0
0x640: 0000000000000000     | 	.quad 0
0x648: 0000000000000000     | 	.quad 0
0x650: 0000000000000000     | 	.quad 0
0x658: 0000000000000000     | 	.quad 0
0x660: 0000000000000000     | 	.quad 0
                            | 
0x668:                      | Stack:
