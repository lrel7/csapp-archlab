                            | #######################################################################
                            | # Test for copying block of size 63;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f43808000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f23f00000000000000 | 	irmovq $63, %rdx		# src and dst have 63 elements
0x014: 30f6b805000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f7a803000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Author: Sum-Yuet Lee
                            | # Date: 2024/5/22
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
0x032: 6300                 | xorq %rax, %rax		        # count = 0;
0x034: c0f2f8ffffffffffffff | iaddq $-8, %rdx             # %rdx < 8?
0x03e: 72b601000000000000   | jl Remain                   # if so, goto Remain
                            | 
0x047:                      | Unroll:
0x047:                      | Unroll_1:
0x047: 50870000000000000000 | mrmovq (%rdi), %r8      # read
0x051: 40860000000000000000 | rmmovq %r8, (%rsi)      # write
0x05b: 6288                 | andq %r8, %r8		    # val <= 0?
0x05d: 717000000000000000   | jle Unroll_2		    # if so, goto next
0x066: c0f00100000000000000 | iaddq $1, %rax          # count++
                            | 
0x070:                      | Unroll_2:
0x070: 50970800000000000000 | mrmovq 8(%rdi), %r9     # read
0x07a: 40960800000000000000 | rmmovq %r9, 8(%rsi)     # write
0x084: 6299                 | andq %r9, %r9		    # val <= 0?
0x086: 719900000000000000   | jle Unroll_3		    # if so, goto next
0x08f: c0f00100000000000000 | iaddq $1, %rax          # count++
                            | 
0x099:                      | Unroll_3:
0x099: 50a71000000000000000 | mrmovq 16(%rdi), %r10   # read
0x0a3: 40a61000000000000000 | rmmovq %r10, 16(%rsi)   # write
0x0ad: 62aa                 | andq %r10, %r10		    # val <= 0?
0x0af: 71c200000000000000   | jle Unroll_4		    # if so, goto next
0x0b8: c0f00100000000000000 | iaddq $1, %rax          # count++
                            | 
0x0c2:                      | Unroll_4:
0x0c2: 50b71800000000000000 | mrmovq 24(%rdi), %r11   # read
0x0cc: 40b61800000000000000 | rmmovq %r11, 24(%rsi)   # write
0x0d6: 62bb                 | andq %r11, %r11		    # val <= 0?
0x0d8: 71eb00000000000000   | jle Unroll_5            # if so, goto next
0x0e1: c0f00100000000000000 | iaddq $1, %rax          # count++
                            | 
0x0eb:                      | Unroll_5:
0x0eb: 50c72000000000000000 | mrmovq 32(%rdi), %r12   # read
0x0f5: 40c62000000000000000 | rmmovq %r12, 32(%rsi)   # write
0x0ff: 62cc                 | andq %r12, %r12 	    # val <= 0?
0x101: 711401000000000000   | jle Unroll_6	        # if so, goto next
0x10a: c0f00100000000000000 | iaddq $1, %rax          # count++
                            | 
0x114:                      | Unroll_6:
0x114: 50d72800000000000000 | mrmovq 40(%rdi), %r13   # read
0x11e: 40d62800000000000000 | rmmovq %r13, 40(%rsi)   # write
0x128: 62dd                 | andq %r13, %r13		    # val <= 0?
0x12a: 713d01000000000000   | jle Unroll_7        	# if so, goto next
0x133: c0f00100000000000000 | iaddq $1, %rax          # count++
                            | 
0x13d:                      | Unroll_7:
0x13d: 50e73000000000000000 | mrmovq 48(%rdi), %r14   # read
0x147: 40e63000000000000000 | rmmovq %r14, 48(%rsi)   # write
0x151: 62ee                 | andq %r14, %r14		    # val <= 0?
0x153: 716601000000000000   | jle Unroll_8            # if so, goto next
0x15c: c0f00100000000000000 | iaddq $1, %rax          # count++
                            | 
0x166:                      | Unroll_8:
0x166: 50373800000000000000 | mrmovq 56(%rdi), %rbx   # read
0x170: 40363800000000000000 | rmmovq %rbx, 56(%rsi)   # write
0x17a: 6233                 | andq %rbx, %rbx		    # val <= 0?
0x17c: 718f01000000000000   | jle Update		        # if so, goto Update
0x185: c0f00100000000000000 | iaddq $1, %rax          # count++
                            | 
0x18f:                      | Update:
                            | # Increment src and dst
0x18f: c0f74000000000000000 | iaddq $64, %rdi
0x199: c0f64000000000000000 | iaddq $64, %rsi
0x1a3: c0f2f8ffffffffffffff | iaddq $-8, %rdx         # len >= 8? (now %rdx = len - 8)
0x1ad: 754700000000000000   | jge Unroll              # if so, keep unrolling
                            | 
                            | # Deal with remain data
                            | # %rdx may be -8 ~ -1
                            | # BST judge
0x1b6:                      | Remain:
0x1b6: c0f20400000000000000 | iaddq $4, %rdx          # %rdx == -4? 
0x1c0: 72e501000000000000   | jl Node_6               # if %rdx < -4, goto Node_6
0x1c9: 766002000000000000   | jg Node_2               # if %rdx > -4, goto Node_2
0x1d2: 50b71800000000000000 | mrmovq 24(%rdi), %r11   # prepare for Remain_4
0x1dc: 700103000000000000   | jmp Remain_4            # goto Remain_4
                            | 
0x1e5:                      | Node_6:
0x1e5: c0f20200000000000000 | iaddq $2, %rdx          # %rdx == -6?
0x1ef: 721402000000000000   | jl Node_7               # if %rdx < -6 (== -7), goto Node_7
0x1f8: 763a02000000000000   | jg Node_5               # if %rdx > -6 (== -5), goto Node_5
0x201: 50970800000000000000 | mrmovq 8(%rdi), %r9     # prepare for Remain_2
0x20b: 705303000000000000   | jmp Remain_2
                            | 
0x214:                      | Node_7:
0x214: c0f20100000000000000 | iaddq $1, %rdx          # %rdx == -7?
0x21e: 72a503000000000000   | jl Done                 # if %rdx < -7 (== -8), goto Done
0x227: 50870000000000000000 | mrmovq (%rdi), %r8      # prepare for Remain_1
0x231: 707c03000000000000   | jmp Remain_1
                            | 
0x23a:                      | Node_5:
0x23a: 50a71000000000000000 | mrmovq 16(%rdi), %r10   # prepare for Remain_3
0x244: 702a03000000000000   | jmp Remain_3
                            | 
0x24d:                      | Node_3:
0x24d: 50c72000000000000000 | mrmovq 32(%rdi), %r12   # prepare for Remain_5
0x257: 70d802000000000000   | jmp Remain_5
                            | 
0x260:                      | Node_2:
0x260: c0f2feffffffffffffff | iaddq $-2, %rdx         # %rdx == -2?
0x26a: 724d02000000000000   | jl Node_3               # if %rdx < -2 (== -3), goto Node_3
0x273: 50d72800000000000000 | mrmovq 40(%rdi), %r13   # prepare for Remain_6
0x27d: 73af02000000000000   | je Remain_6             # if %rdx == -2, goto Remain_6
                            |                         # else, %rdx == -1, goto Remain_7
                            | 
0x286:                      | Remain_7:
0x286: 50e73000000000000000 | mrmovq 48(%rdi), %r14   # read
0x290: 40e63000000000000000 | rmmovq %r14, 48(%rsi)   # write
0x29a: 62ee                 | andq %r14, %r14
0x29c: 71af02000000000000   | jle Remain_6
0x2a5: c0f00100000000000000 | iaddq $1, %rax
                            | 
0x2af:                      | Remain_6:
0x2af: 50d72800000000000000 | mrmovq 40(%rdi), %r13   # read
0x2b9: 40d62800000000000000 | rmmovq %r13, 40(%rsi)   # write
0x2c3: 62dd                 | andq %r13, %r13
0x2c5: 71d802000000000000   | jle Remain_5
0x2ce: c0f00100000000000000 | iaddq $1, %rax
                            | 
0x2d8:                      | Remain_5:
0x2d8: 50c72000000000000000 | mrmovq 32(%rdi), %r12   # read
0x2e2: 40c62000000000000000 | rmmovq %r12, 32(%rsi)   # write
0x2ec: 62cc                 | andq %r12, %r12
0x2ee: 710103000000000000   | jle Remain_4
0x2f7: c0f00100000000000000 | iaddq $1, %rax
                            | 
0x301:                      | Remain_4: 
0x301: 50b71800000000000000 | mrmovq 24(%rdi), %r11   # read
0x30b: 40b61800000000000000 | rmmovq %r11, 24(%rsi)   # write
0x315: 62bb                 | andq %r11, %r11
0x317: 712a03000000000000   | jle Remain_3
0x320: c0f00100000000000000 | iaddq $1, %rax
                            | 
0x32a:                      | Remain_3:  
0x32a: 50a71000000000000000 | mrmovq 16(%rdi), %r10   # read
0x334: 40a61000000000000000 | rmmovq %r10, 16(%rsi)   # write
0x33e: 62aa                 | andq %r10, %r10
0x340: 715303000000000000   | jle Remain_2
0x349: c0f00100000000000000 | iaddq $1, %rax
                            | 
0x353:                      | Remain_2:  
0x353: 50970800000000000000 | mrmovq 8(%rdi), %r9     # read
0x35d: 40960800000000000000 | rmmovq %r9, 8(%rsi)     # write
0x367: 6299                 | andq %r9, %r9
0x369: 717c03000000000000   | jle Remain_1
0x372: c0f00100000000000000 | iaddq $1, %rax
                            | 
0x37c:                      | Remain_1:  
0x37c: 50870000000000000000 | mrmovq (%rdi), %r8      # read
0x386: 40860000000000000000 | rmmovq %r8, (%rsi)      # write
0x390: 6288                 | andq %r8, %r8
0x392: 71a503000000000000   | jle Done
0x39b: c0f00100000000000000 | iaddq $1, %rax
                            | 
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x3a5:                      | Done:
0x3a5: 90                   | ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x3a6:                      | End:
                            | #/* $end ncopy-ys */
0x3a6:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x3a8:                      | 	.align 8
0x3a8:                      | src:
0x3a8: 0100000000000000     | 	.quad 1
0x3b0: feffffffffffffff     | 	.quad -2
0x3b8: fdffffffffffffff     | 	.quad -3
0x3c0: 0400000000000000     | 	.quad 4
0x3c8: fbffffffffffffff     | 	.quad -5
0x3d0: 0600000000000000     | 	.quad 6
0x3d8: f9ffffffffffffff     | 	.quad -7
0x3e0: f8ffffffffffffff     | 	.quad -8
0x3e8: f7ffffffffffffff     | 	.quad -9
0x3f0: 0a00000000000000     | 	.quad 10
0x3f8: 0b00000000000000     | 	.quad 11
0x400: 0c00000000000000     | 	.quad 12
0x408: f3ffffffffffffff     | 	.quad -13
0x410: f2ffffffffffffff     | 	.quad -14
0x418: 0f00000000000000     | 	.quad 15
0x420: f0ffffffffffffff     | 	.quad -16
0x428: efffffffffffffff     | 	.quad -17
0x430: eeffffffffffffff     | 	.quad -18
0x438: 1300000000000000     | 	.quad 19
0x440: ecffffffffffffff     | 	.quad -20
0x448: ebffffffffffffff     | 	.quad -21
0x450: eaffffffffffffff     | 	.quad -22
0x458: 1700000000000000     | 	.quad 23
0x460: e8ffffffffffffff     | 	.quad -24
0x468: e7ffffffffffffff     | 	.quad -25
0x470: e6ffffffffffffff     | 	.quad -26
0x478: e5ffffffffffffff     | 	.quad -27
0x480: 1c00000000000000     | 	.quad 28
0x488: e3ffffffffffffff     | 	.quad -29
0x490: e2ffffffffffffff     | 	.quad -30
0x498: e1ffffffffffffff     | 	.quad -31
0x4a0: 2000000000000000     | 	.quad 32
0x4a8: dfffffffffffffff     | 	.quad -33
0x4b0: 2200000000000000     | 	.quad 34
0x4b8: ddffffffffffffff     | 	.quad -35
0x4c0: 2400000000000000     | 	.quad 36
0x4c8: 2500000000000000     | 	.quad 37
0x4d0: daffffffffffffff     | 	.quad -38
0x4d8: 2700000000000000     | 	.quad 39
0x4e0: d8ffffffffffffff     | 	.quad -40
0x4e8: d7ffffffffffffff     | 	.quad -41
0x4f0: 2a00000000000000     | 	.quad 42
0x4f8: d5ffffffffffffff     | 	.quad -43
0x500: d4ffffffffffffff     | 	.quad -44
0x508: d3ffffffffffffff     | 	.quad -45
0x510: d2ffffffffffffff     | 	.quad -46
0x518: d1ffffffffffffff     | 	.quad -47
0x520: d0ffffffffffffff     | 	.quad -48
0x528: 3100000000000000     | 	.quad 49
0x530: 3200000000000000     | 	.quad 50
0x538: 3300000000000000     | 	.quad 51
0x540: 3400000000000000     | 	.quad 52
0x548: 3500000000000000     | 	.quad 53
0x550: 3600000000000000     | 	.quad 54
0x558: 3700000000000000     | 	.quad 55
0x560: 3800000000000000     | 	.quad 56
0x568: 3900000000000000     | 	.quad 57
0x570: 3a00000000000000     | 	.quad 58
0x578: 3b00000000000000     | 	.quad 59
0x580: 3c00000000000000     | 	.quad 60
0x588: 3d00000000000000     | 	.quad 61
0x590: 3e00000000000000     | 	.quad 62
0x598: 3f00000000000000     | 	.quad 63
0x5a0: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x5b0:                      | 	.align 16
0x5b0:                      | Predest:
0x5b0: fadebc0000000000     | 	.quad 0xbcdefa
0x5b8:                      | dest:
0x5b8: abefcd0000000000     | 	.quad 0xcdefab
0x5c0: abefcd0000000000     | 	.quad 0xcdefab
0x5c8: abefcd0000000000     | 	.quad 0xcdefab
0x5d0: abefcd0000000000     | 	.quad 0xcdefab
0x5d8: abefcd0000000000     | 	.quad 0xcdefab
0x5e0: abefcd0000000000     | 	.quad 0xcdefab
0x5e8: abefcd0000000000     | 	.quad 0xcdefab
0x5f0: abefcd0000000000     | 	.quad 0xcdefab
0x5f8: abefcd0000000000     | 	.quad 0xcdefab
0x600: abefcd0000000000     | 	.quad 0xcdefab
0x608: abefcd0000000000     | 	.quad 0xcdefab
0x610: abefcd0000000000     | 	.quad 0xcdefab
0x618: abefcd0000000000     | 	.quad 0xcdefab
0x620: abefcd0000000000     | 	.quad 0xcdefab
0x628: abefcd0000000000     | 	.quad 0xcdefab
0x630: abefcd0000000000     | 	.quad 0xcdefab
0x638: abefcd0000000000     | 	.quad 0xcdefab
0x640: abefcd0000000000     | 	.quad 0xcdefab
0x648: abefcd0000000000     | 	.quad 0xcdefab
0x650: abefcd0000000000     | 	.quad 0xcdefab
0x658: abefcd0000000000     | 	.quad 0xcdefab
0x660: abefcd0000000000     | 	.quad 0xcdefab
0x668: abefcd0000000000     | 	.quad 0xcdefab
0x670: abefcd0000000000     | 	.quad 0xcdefab
0x678: abefcd0000000000     | 	.quad 0xcdefab
0x680: abefcd0000000000     | 	.quad 0xcdefab
0x688: abefcd0000000000     | 	.quad 0xcdefab
0x690: abefcd0000000000     | 	.quad 0xcdefab
0x698: abefcd0000000000     | 	.quad 0xcdefab
0x6a0: abefcd0000000000     | 	.quad 0xcdefab
0x6a8: abefcd0000000000     | 	.quad 0xcdefab
0x6b0: abefcd0000000000     | 	.quad 0xcdefab
0x6b8: abefcd0000000000     | 	.quad 0xcdefab
0x6c0: abefcd0000000000     | 	.quad 0xcdefab
0x6c8: abefcd0000000000     | 	.quad 0xcdefab
0x6d0: abefcd0000000000     | 	.quad 0xcdefab
0x6d8: abefcd0000000000     | 	.quad 0xcdefab
0x6e0: abefcd0000000000     | 	.quad 0xcdefab
0x6e8: abefcd0000000000     | 	.quad 0xcdefab
0x6f0: abefcd0000000000     | 	.quad 0xcdefab
0x6f8: abefcd0000000000     | 	.quad 0xcdefab
0x700: abefcd0000000000     | 	.quad 0xcdefab
0x708: abefcd0000000000     | 	.quad 0xcdefab
0x710: abefcd0000000000     | 	.quad 0xcdefab
0x718: abefcd0000000000     | 	.quad 0xcdefab
0x720: abefcd0000000000     | 	.quad 0xcdefab
0x728: abefcd0000000000     | 	.quad 0xcdefab
0x730: abefcd0000000000     | 	.quad 0xcdefab
0x738: abefcd0000000000     | 	.quad 0xcdefab
0x740: abefcd0000000000     | 	.quad 0xcdefab
0x748: abefcd0000000000     | 	.quad 0xcdefab
0x750: abefcd0000000000     | 	.quad 0xcdefab
0x758: abefcd0000000000     | 	.quad 0xcdefab
0x760: abefcd0000000000     | 	.quad 0xcdefab
0x768: abefcd0000000000     | 	.quad 0xcdefab
0x770: abefcd0000000000     | 	.quad 0xcdefab
0x778: abefcd0000000000     | 	.quad 0xcdefab
0x780: abefcd0000000000     | 	.quad 0xcdefab
0x788: abefcd0000000000     | 	.quad 0xcdefab
0x790: abefcd0000000000     | 	.quad 0xcdefab
0x798: abefcd0000000000     | 	.quad 0xcdefab
0x7a0: abefcd0000000000     | 	.quad 0xcdefab
0x7a8: abefcd0000000000     | 	.quad 0xcdefab
0x7b0:                      | Postdest:
0x7b0: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x7b8:                      | .align 8
                            | # Run time stack
0x7b8: 0000000000000000     | 	.quad 0
0x7c0: 0000000000000000     | 	.quad 0
0x7c8: 0000000000000000     | 	.quad 0
0x7d0: 0000000000000000     | 	.quad 0
0x7d8: 0000000000000000     | 	.quad 0
0x7e0: 0000000000000000     | 	.quad 0
0x7e8: 0000000000000000     | 	.quad 0
0x7f0: 0000000000000000     | 	.quad 0
0x7f8: 0000000000000000     | 	.quad 0
0x800: 0000000000000000     | 	.quad 0
0x808: 0000000000000000     | 	.quad 0
0x810: 0000000000000000     | 	.quad 0
0x818: 0000000000000000     | 	.quad 0
0x820: 0000000000000000     | 	.quad 0
0x828: 0000000000000000     | 	.quad 0
0x830: 0000000000000000     | 	.quad 0
                            | 
0x838:                      | Stack:
