0x000:                      | .pos 0  
0x000: 30f40001000000000000 | irmovq stack, %rsp # Set up stack pointer
0x00a: 804800000000000000   | call main # Execute main program
0x013: 00                   | halt # Terminate program
                            | 
                            | # Sample linked list
0x018:                      | .align 8
0x018:                      | ele1:
0x018: 0a00000000000000     | .quad 0x00a
0x020: 2800000000000000     | .quad ele2
0x028:                      | ele2:
0x028: b000000000000000     | .quad 0x0b0
0x030: 3800000000000000     | .quad ele3
0x038:                      | ele3:
0x038: 000c000000000000     | .quad 0xc00
0x040: 0000000000000000     | .quad 0
                            | 
0x048:                      | main:
0x048: 30f71800000000000000 | irmovq ele1, %rdi
0x052: 805c00000000000000   | call rsum  # sum(ele1)
0x05b: 90                   | ret
                            | 
0x05c:                      | rsum:
                            | # %rdi: head pointer of the linked list
0x05c: 6300                 | xorq %rax, %rax  # sum <- 0
0x05e: 6277                 | andq %rdi, %rdi  # set cc according to %rdi
0x060: 738c00000000000000   | je end
                            | 
0x069: 50870000000000000000 | mrmovq (%rdi), %r8  # get ele->val
0x073: a08f                 | pushq %r8  # save %r8
0x075: 50770800000000000000 | mrmovq 8(%rdi), %rdi  # go to next
0x07f: 805c00000000000000   | call rsum
0x088: b08f                 | popq %r8  # restore %r8
0x08a: 6080                 | addq %r8, %rax  # add to sum
                            | 
0x08c:                      | end:
0x08c: 90                   | ret
                            | 
                            | # Stack starts here and grows to lower addresses
0x100:                      | .pos 0x100
0x100:                      | stack:
