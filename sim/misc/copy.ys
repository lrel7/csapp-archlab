.pos 0
irmovq stack, %rsp # Set up stack pointer
call main # Execute main program
halt # Terminate program

.align 8
# Source block
src:
.quad 0x00a
.quad 0x0b0
.quad 0xc00
# Destination block
dest:
.quad 0x111
.quad 0x222
.quad 0x333

main:
irmovq src, %rsi
irmovq dest, %rdi
irmovq $3, %rcx
call copy  # copy(rsc, dest, 3)
ret

copy:
# %rsi: src
# %rdi: dest
# %rcx: len
# %rax: result
xorq %rax, %rax  # result <- 0
irmovq $8, %r8  # constant 8
irmovq $1, %r9  # constant 1
jmp test  # go to test

loop:
mrmovq (%rsi), %r10  # %r10 <- *src
rmmovq %r10, (%rdi)  # *dest <- %r10
xorq %r10, %rax  # result ^= val
addq %r8, %rsi  # src++
addq %r8, %rdi  # dest++
subq %r9, %rcx  # len--

test:
andq %rcx, %rcx  # set cc according to %rcx
jne loop # Stop when 0
ret # Return

# Stack starts here and grows to lower addresses
.pos 0x100
stack:
